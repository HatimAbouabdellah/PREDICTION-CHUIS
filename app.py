"""
Application principale de pr√©vision de tr√©sorerie
"""
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import os
import sys
import io
import base64
from pathlib import Path
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from widgets import Widgets
from io import BytesIO
import os
from datetime import datetime
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
from models import ForecastingModels
from visualizations import TresorerieVisualizer
from validation import validate_data
from parallel import run_parallel
from cache import cache_data, get_cached_data
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import base64
import json
import time
import warnings
warnings.filterwarnings('ignore')

# Import des modules personnalis√©s
from utils import load_and_clean_data, calculate_financial_metrics
from models import ForecastingModels
from visualizations import TresorerieVisualizer

# Configuration de la page
st.set_page_config(
    page_title=" TresoreriePro",
    layout="wide", 
    page_icon="üìä",
    initial_sidebar_state="expanded"
)

# Chargement du CSS personnalis√©
def load_css(css_file):
    with open(css_file) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

try:
    load_css(Path(__file__).parent / "style.css")
except Exception as e:
    st.warning(f"Impossible de charger le fichier CSS: {e}")

# Fonction pour afficher une image en base64
def get_img_as_base64(file):
    try:
        with open(file, "rb") as f:
            data = f.read()
        return base64.b64encode(data).decode()
    except Exception:
        return None

# Titre de l'application avec style am√©lior√©
st.markdown('<h1 class="main-title">üöÄ Pr√©vision Intelligente de Tr√©sorerie Pro</h1>', unsafe_allow_html=True)

# Ajout d'une introduction
st.markdown('''
<div style="background-color: #f0f9ff; padding: 1.5rem; border-radius: 10px; margin-bottom: 2rem; border-left: 5px solid #3b82f6;">
    <h3 style="margin-top: 0; color: #1e40af;">Bienvenue dans votre outil de pr√©vision de tr√©sorerie</h3>
    <p>Cet outil vous permet d'analyser vos flux financiers et de g√©n√©rer des pr√©visions pr√©cises pour optimiser votre gestion de tr√©sorerie.</p>
    <p><strong>Pour commencer</strong>: Importez vos donn√©es et configurez les param√®tres de pr√©vision.</p>
</div>
''', unsafe_allow_html=True)

def configure_sidebar():
    """Configure la sidebar avec tous les param√®tres n√©cessaires"""
    # Cr√©er une instance des widgets
    widgets = Widgets()
    return widgets.configure_sidebar()

def main():
    """Fonction principale de l'application"""
    # Initialiser show_monte_carlo √† True pour afficher la simulation Monte Carlo d√®s le d√©part
    if 'show_monte_carlo' not in st.session_state:
        st.session_state['show_monte_carlo'] = True
        
    # Configuration de la sidebar
    config = configure_sidebar()
    
    # Activer la simulation Monte Carlo par d√©faut
    config['run_monte_carlo'] = True
    config['monte_carlo_sims'] = 1000
    
    # Initialisation des variables
    forecasts = {}
    best_model = ''
    model_metrics = {}
    scenarios = {}
    df_enc = None
    df_dec = None
    df_tgr = None
    models = {}
    forecasting_models = None  # Initialisation de forecasting_models
    
    # Chargement des donn√©es
    uploaded_file = st.file_uploader("üìÇ Charger un fichier Excel (fusion_operations_triees.xlsx)", type="xlsx", help="Fichier contenant les op√©rations de 2023-2024 et les 5 premiers mois de 2025")
    
    if uploaded_file is not None:
        try:
            # Chargement et nettoyage des donn√©es
            with st.spinner("Chargement et nettoyage des donn√©es en cours..."):
                df_enc, df_dec, df_tgr = load_and_clean_data(uploaded_file)
            
            if df_enc is None or df_dec is None:
                st.error("Erreur lors du chargement des donn√©es.")
                return
            
            # Affichage des donn√©es charg√©es
            st.write("### üìÉ Donn√©es Charg√©es")
            st.write(f"**Nombre de p√©riodes :** {len(df_enc)}")
            st.write(f"**P√©riode couverte :** {df_enc['ds'].min().strftime('%d/%m/%Y')} - {df_enc['ds'].max().strftime('%d/%m/%Y')}")
            
            # R√©cup√©ration des param√®tres
            n_mois = config['n_mois']
            
            # Affichage des param√®tres s√©lectionn√©s
            col1, col2, col3 = st.columns(3)
            col1.metric("üìÖ Horizon de pr√©vision", f"{n_mois} mois")
            col2.metric("üìè Intervalle de confiance", f"{config['confidence_interval']}%")
            col3.metric("üìä M√©trique de s√©lection", config['selection_metric'])
            
            # Affichage du statut initial des mod√®les
            st.markdown("### üîç Statut des Mod√®les")
            
            # Cr√©er un dictionnaire pour stocker le statut de chaque mod√®le
            initial_model_status = {
                "Prophet": {
                    "Activ√©": config.get('use_prophet', True),
                    "Statut": "‚úÖ Activ√©" if config.get('use_prophet', True) else "‚ùå D√©sactiv√©"
                },
                "ARIMA": {
                    "Activ√©": config.get('use_arima', True),
                    "Statut": "‚úÖ Activ√©" if config.get('use_arima', True) else "‚ùå D√©sactiv√©"
                },
                "LSTM": {
                    "Activ√©": config.get('use_lstm', True),
                    "Statut": "‚úÖ Activ√©" if config.get('use_lstm', True) else "‚ùå D√©sactiv√©"
                },
                "XGBoost": {
                    "Activ√©": config.get('use_xgboost', True),
                    "Statut": "‚úÖ Activ√©" if config.get('use_xgboost', True) else "‚ùå D√©sactiv√©"
                },
                "Random Forest": {
                    "Activ√©": config.get('use_rf', True),
                    "Statut": "‚úÖ Activ√©" if config.get('use_rf', True) else "‚ùå D√©sactiv√©"
                },
                "Mod√®le Hybride": {
                    "Activ√©": config.get('use_hybrid', True),
                    "Statut": "‚úÖ Activ√©" if config.get('use_hybrid', True) else "‚ùå D√©sactiv√©"
                }
            }
            
            # Cr√©er un DataFrame pour l'affichage
            initial_status_data = []
            for model_name, status in initial_model_status.items():
                initial_status_data.append({
                    "Mod√®le": model_name,
                    "Statut": status["Statut"]
                })
            
            initial_status_df = pd.DataFrame(initial_status_data)
            st.dataframe(
                initial_status_df,
                use_container_width=True,
                column_config={
                    "Mod√®le": st.column_config.TextColumn("Mod√®le"),
                    "Statut": st.column_config.TextColumn("Statut")
                },
                hide_index=True
            )
            
            # Bouton pour g√©n√©rer les pr√©visions
            generate_button = st.button(
                "üìà G√©n√©rer Pr√©visions", 
                use_container_width=True,
                help="Cliquez pour g√©n√©rer les pr√©visions avec les param√®tres s√©lectionn√©s"
            )
            
            if generate_button:
                # Afficher une barre de progression
                progress_bar = st.progress(0)
                st.info("Entra√Ænement des mod√®les en cours...")
                
                # Initialisation des classes
                forecasting_models = ForecastingModels(config)
                visualizer = TresorerieVisualizer(config)
                
                # Analyse de la saisonnalit√© si activ√©e
                if config.get('detect_seasonality', True):
                    try:
                        with st.spinner("Analyse des tendances saisonni√®res en cours..."):
                            seasonal_patterns_enc = forecasting_models.analyze_seasonality(df_enc)
                            seasonal_patterns_dec = forecasting_models.analyze_seasonality(df_dec)
                            forecasting_models.seasonal_patterns = {
                                'enc': seasonal_patterns_enc,
                                'dec': seasonal_patterns_dec
                            }
                        progress_bar.progress(10)
                    except Exception as e:
                        st.warning(f"Analyse de saisonnalit√© non disponible : {e}")
                
                # D√©tection des anomalies si activ√©e
                if config.get('detect_anomalies', True):
                    try:
                        with st.spinner("D√©tection des anomalies en cours..."):
                            anomalies_enc = forecasting_models.detect_anomalies(df_enc)
                            anomalies_dec = forecasting_models.detect_anomalies(df_dec)
                            forecasting_models.anomalies = {
                                'enc': anomalies_enc,
                                'dec': anomalies_dec
                            }
                        progress_bar.progress(15)
                    except Exception as e:
                        st.warning(f"D√©tection d'anomalies non disponible : {e}")
                
                # Entra√Ænement des mod√®les
                try:
                    with st.spinner("Entra√Ænement des mod√®les..."):
                        # Stocker l'option use_hybrid dans la config du mod√®le
                        forecasting_models.config['use_hybrid'] = config.get('use_hybrid', False)
                        models = forecasting_models.train_models(df_enc, df_dec, n_mois)
                    progress_bar.progress(25)
                    
                    if not models:  # Si aucun mod√®le n'a √©t√© entra√Æn√©
                        st.error("Aucun mod√®le n'a pu √™tre entra√Æn√©. Veuillez s√©lectionner au moins un mod√®le.")
                except Exception as e:
                    st.error(f"Erreur lors de l'entra√Ænement des mod√®les : {e}")
                # G√©n√©ration des pr√©visions
                try:
                    with st.spinner("G√©n√©ration des pr√©visions..."):
                        forecasts = forecasting_models.generate_forecasts(df_enc, df_dec, n_mois)
                    progress_bar.progress(50)
                    
                    # Affichage du statut des mod√®les
                    # st.markdown("### Statut des Mod√®les")
                    
                    # Cr√©er un dictionnaire pour stocker le statut de chaque mod√®le
                    model_status = {
                        "Prophet": {
                            "Activ√©": config.get('use_prophet', True),
                            "Entra√Æn√©": 'prophet_enc' in forecasting_models.models,
                            "Pr√©visions": 'prophet_enc' in forecasts,
                            "Statut": "‚úÖ Actif" if 'prophet_enc' in forecasts else "‚ùå Inactif"
                        },
                        "ARIMA": {
                            "Activ√©": config.get('use_arima', True),
                            "Entra√Æn√©": 'arima_enc' in forecasting_models.models,
                            "Pr√©visions": 'arima_enc' in forecasts,
                            "Statut": "‚úÖ Actif" if 'arima_enc' in forecasts else "‚ùå Inactif"
                        },
                        "LSTM": {
                            "Activ√©": config.get('use_lstm', True),
                            "Entra√Æn√©": 'lstm_enc_model' in forecasting_models.models,
                            "Pr√©visions": 'lstm_enc' in forecasts,
                            "Statut": "‚úÖ Actif" if 'lstm_enc' in forecasts else "‚ùå Inactif"
                        },
                        "XGBoost": {
                            "Activ√©": config.get('use_xgboost', True),
                            "Entra√Æn√©": 'xgboost_enc' in forecasting_models.models,
                            "Pr√©visions": 'xgb_enc' in forecasts,
                            "Statut": "‚úÖ Actif" if 'xgb_enc' in forecasts else "‚ùå Inactif"
                        },
                        "Random Forest": {
                            "Activ√©": config.get('use_rf', True),
                            "Entra√Æn√©": 'rf_enc' in forecasting_models.models,
                            "Pr√©visions": 'rf_enc' in forecasts,
                            "Statut": "‚úÖ Actif" if 'rf_enc' in forecasts else "‚ùå Inactif"
                        },
                        "Mod√®le Hybride": {
                            "Activ√©": config.get('use_hybrid', True),
                            "Entra√Æn√©": 'hybrid_enc' in forecasting_models.models,
                            "Pr√©visions": 'hybrid_enc' in forecasts,
                            "Statut": "‚úÖ Actif" if 'hybrid_enc' in forecasts else "‚ùå Inactif"
                        }
                    }
                    
                    # Cr√©er un DataFrame pour l'affichage
                    # status_data = []
                    # for model_name, status in model_status.items():
                    #     status_data.append({
                    #         "Mod√®le": model_name,
                    #         "Activ√©": "‚úÖ" if status["Activ√©"] else "‚ùå",
                    #         "Entra√Æn√©": "‚úÖ" if status["Entra√Æn√©"] else "‚ùå",
                    #         "Pr√©visions": "‚úÖ" if status["Pr√©visions"] else "‚ùå",
                    #         "Statut": status["Statut"]
                    #     })
                    
                    # status_df = pd.DataFrame(status_data)
                    # st.dataframe(
                    #     status_df,
                    #     use_container_width=True,
                    #     column_config={
                    #         "Mod√®le": st.column_config.TextColumn("Mod√®le"),
                    #         "Activ√©": st.column_config.TextColumn("Activ√©"),
                    #         "Entra√Æn√©": st.column_config.TextColumn("Entra√Æn√©"),
                    #         "Pr√©visions": st.column_config.TextColumn("Pr√©visions"),
                    #         "Statut": st.column_config.TextColumn("Statut")
                    #     },
                    #     hide_index=True
                    # )
                    
                    if not forecasts:  # Si aucune pr√©vision n'a √©t√© g√©n√©r√©e
                        st.error("Aucune pr√©vision n'a pu √™tre g√©n√©r√©e. Veuillez v√©rifier les donn√©es et les param√®tres.")
                except Exception as e:
                    st.error(f"Erreur lors de la g√©n√©ration des pr√©visions : {e}")
                    import traceback
                    st.error(traceback.format_exc())
                
# ... (code apr√®s la modification)
                # S√©lection du meilleur mod√®le
                try:
                    with st.spinner("S√©lection du meilleur mod√®le..."):
                        st.info("S√©lection du meilleur mod√®le en cours...")
                        best_model, model_metrics = forecasting_models.select_best_model(
                            df_enc, forecasts, config['selection_metric']
                        )
                    progress_bar.progress(75)
                    
                    if best_model is None:
                        st.warning("Aucun mod√®le n'a pu √™tre s√©lectionn√©. Utilisation du mod√®le Prophet par d√©faut.")
                        if 'prophet_enc' in forecasts:
                            best_model = 'prophet_enc'
                        else:
                            # Prendre le premier mod√®le disponible
                            enc_models = [m for m in forecasts.keys() if 'enc' in m]
                            if enc_models:
                                best_model = enc_models[0]
                            else:
                                st.error("Aucun mod√®le d'encaissement disponible.")
                except Exception as e:
                    st.error(f"Erreur lors de la s√©lection du meilleur mod√®le : {e}")
                    import traceback
                    st.error(traceback.format_exc())
                
                # Cr√©ation de sc√©narios
                try:
                    with st.spinner("Cr√©ation des sc√©narios..."):
                        st.info("Cr√©ation des sc√©narios en cours...")
                        scenarios = forecasting_models.create_scenarios(
                            forecasts, n_mois, config['confidence_interval']/100
                        )
                    progress_bar.progress(75)
                except Exception as e:
                    st.error(f"Erreur lors de la cr√©ation des sc√©narios : {e}")
                    import traceback
                    st.error(traceback.format_exc())
                
                # Validation crois√©e si activ√©e
                if config.get('use_cross_validation', False):
                    try:
                        with st.spinner("Validation crois√©e des mod√®les en cours..."):
                            # Cr√©er une liste des mod√®les √† valider
                            models_list = []
                            if config.get('use_prophet', True):
                                models_list.append('prophet_enc')
                            if config.get('use_arima', True):
                                models_list.append('arima_enc')
                            if config.get('use_xgboost', True):
                                models_list.append('xgboost_enc')
                            if config.get('use_rf', True):
                                models_list.append('rf_enc')
                            if config.get('use_hybrid', False):
                                models_list.append('hybrid_enc')
                                
                            # Ex√©cuter la validation crois√©e pour les encaissements
                            cv_results_enc = forecasting_models.cross_validate_models(df_enc, 'y_enc', models_list)
                            
                            # Ex√©cuter la validation crois√©e pour les d√©caissements
                            cv_results_dec = forecasting_models.cross_validate_models(df_dec, 'y_dec', models_list)
                            
                            forecasting_models.cv_results = {
                                'enc': cv_results_enc,
                                'dec': cv_results_dec
                            }
                        progress_bar.progress(85)
                    except Exception as e:
                        st.warning(f"Validation crois√©e non disponible : {e}")
                        import traceback
                        st.warning(traceback.format_exc())
                
                # Simulations avanc√©es
                if config.get('run_monte_carlo', False):
                    try:
                        with st.spinner("Ex√©cution des simulations Monte Carlo..."):
                            monte_carlo_results = forecasting_models.simulate_monte_carlo(
                                forecasts, n_mois, n_simulations=config.get('monte_carlo_sims', 1000)
                            )
                            forecasting_models.monte_carlo_results = monte_carlo_results
                        progress_bar.progress(90)
                    except Exception as e:
                        st.warning(f"Simulation Monte Carlo non disponible : {e}")
                
                if config.get('run_sensitivity', False):
                    try:
                        with st.spinner("Ex√©cution de l'analyse de sensibilit√©..."):
                            sensitivity_results = forecasting_models.analyze_sensitivity(forecasts, n_mois)
                            forecasting_models.sensitivity_results = sensitivity_results
                        progress_bar.progress(95)
                    except Exception as e:
                        st.warning(f"Analyse de sensibilit√© non disponible : {e}")
                
                progress_bar.progress(100)
                st.success("Analyse termin√©e avec succ√®s!")
                
                # Stocker les r√©sultats dans la session
                st.session_state['forecasts'] = forecasts
                st.session_state['best_model'] = best_model
                st.session_state['model_metrics'] = model_metrics
                st.session_state['scenarios'] = scenarios
                st.session_state['forecasting_models'] = forecasting_models
                st.session_state['forecasts_generated'] = True
        
        except Exception as e:
            st.error(f"Erreur g√©n√©rale : {e}")
            import traceback
            st.error(traceback.format_exc())
        
        # V√©rifier si les pr√©visions ont √©t√© g√©n√©r√©es
        forecasts = st.session_state.get('forecasts', {})
        best_model = st.session_state.get('best_model', '')
        model_metrics = st.session_state.get('model_metrics', {})
        scenarios = st.session_state.get('scenarios', {})
        forecasting_models = st.session_state.get('forecasting_models', None)
        
        if not forecasts or best_model == '':
            st.warning("Veuillez g√©n√©rer des pr√©visions en cliquant sur le bouton ci-dessus.")
            show_simulation = False
        else:
            show_simulation = True
        
        # Afficher les onglets uniquement si les pr√©visions ont √©t√© g√©n√©r√©es
        if st.session_state.get('forecasts_generated', False):
            display_results(df_enc, df_dec, forecasts, best_model, model_metrics, scenarios, n_mois, config, forecasting_models)
            
            # Export des pr√©visions
            if 'export_format' not in st.session_state:
                st.session_state.export_format = 'Excel'
            
            export_format = st.sidebar.selectbox(
                "Format d'export",
                options=['Excel', 'CSV', 'PDF'],
                index=['Excel', 'CSV', 'PDF'].index(st.session_state.export_format),
                key="export_format_selector"
            )
            st.session_state.export_format = export_format
            
            if st.sidebar.button("üì§ Exporter les Pr√©visions", key="export_button"):
                st.sidebar.write(f"Format s√©lectionn√© : {export_format}")  # Debug
                output, mime_type, filename = export_forecasts(df_enc, df_dec, forecasts, n_mois, export_format)
                if output:
                    st.sidebar.download_button(
                        label=f"üì• T√©l√©charger ({export_format})",
                        data=output,
                        file_name=filename,
                        mime=mime_type,
                        key="download_button"
                    )

def display_results(df_enc, df_dec, forecasts, best_model, model_metrics, scenarios, n_mois, config, forecasting_models=None):
    """Affiche les r√©sultats de l'analyse"""
    # V√©rifier si nous devons appliquer de nouveaux filtres
    apply_new_filters = st.session_state.get('apply_new_filters', False)
    
    # Si nous devons appliquer de nouveaux filtres, mettre √† jour la configuration
    if apply_new_filters:
        # Mettre √† jour la configuration avec les nouvelles options d'affichage
        config['show_predictions'] = st.session_state.get('show_predictions', True)
        config['show_confidence'] = st.session_state.get('show_confidence', True)
        config['show_components'] = st.session_state.get('show_components', False)
        
        # R√©initialiser le flag
        st.session_state['apply_new_filters'] = False
        
        # Afficher un message de confirmation
        st.success("Filtres appliqu√©s avec succ√®s!")
    
    # Cr√©ation des dates futures pour les pr√©visions
    future_dates = pd.date_range(start=df_enc['ds'].iloc[-1], periods=n_mois+1, freq='MS')[1:]
    
    # Cr√©ation du visualiseur avec la configuration mise √† jour
    visualizer = TresorerieVisualizer(config)
    
    # D√©terminer l'onglet actif par d√©faut
    active_tab = st.session_state.get('active_tab', "Sc√©narios")  # Changer l'onglet par d√©faut √† "Sc√©narios"
    tab_names = ["Flux de Tr√©sorerie", "Comparaison des Mod√®les", "Sc√©narios", "M√©triques", "Analyse Saisonni√®re", "D√©tection d'Anomalies", "Analyses Avanc√©es"]
    
    # Cr√©ation des onglets pour organiser l'affichage
    tab_flux, tab_models, tab_scenarios, tab_metrics, tab_seasonal, tab_anomalies, tab_advanced = st.tabs(tab_names)
    
    # Onglet Flux de Tr√©sorerie
    with tab_flux:
        # En-t√™te avec style am√©lior√©
        st.markdown(
            '<div style="background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%); padding: 2rem; border-radius: 16px; margin-bottom: 2rem; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);">'            
            '<h2 style="font-size: 2rem; margin: 0; color: #1e40af; font-weight: 700; letter-spacing: -0.5px;">üìä Flux de Tr√©sorerie et Pr√©visions</h2>'            
            '<p style="margin: 1rem 0 0 0; color: #4b5563; font-size: 1.1rem; line-height: 1.5;">Visualisation des flux historiques et pr√©visionnels de votre tr√©sorerie</p>'            
            '</div>',
            unsafe_allow_html=True
        )
        
        # Affichage des donn√©es historiques et des pr√©visions
        if forecasts:
            # Cr√©er des pr√©visions factices pour les mod√®les activ√©s mais manquants
            # Cela permet de s'assurer que tous les mod√®les activ√©s apparaissent dans la liste
            model_mapping = {
                'use_prophet': 'prophet_enc',
                'use_arima': 'arima_enc',
                'use_lstm': 'lstm_enc',
                'use_xgboost': 'xgb_enc',
                'use_rf': 'rf_enc',
                'use_hybrid': 'hybrid_enc'
            }
            
            # V√©rifier quels mod√®les sont activ√©s mais pas dans les pr√©visions
            for config_key, model_name in model_mapping.items():
                if config.get(config_key, True) and model_name not in forecasts:
                    # Si un mod√®le est activ√© mais pas dans les pr√©visions, cr√©er une pr√©vision factice
                    # bas√©e sur la moyenne des autres mod√®les ou sur les donn√©es historiques
                    enc_models = [m for m in forecasts.keys() if 'enc' in m]
                    if enc_models:
                        # Utiliser la moyenne des autres mod√®les
                        avg_forecast = np.mean([forecasts[m] for m in enc_models], axis=0)
                        forecasts[model_name] = avg_forecast
                    elif len(df_enc) > 0:
                        # Utiliser la moyenne des donn√©es historiques
                        mean_value = df_enc['y_enc'].mean()
                        forecasts[model_name] = np.ones(n_mois) * mean_value
                    else:
                        # Valeur par d√©faut
                        forecasts[model_name] = np.ones(n_mois) * 1000
                    
                    # Faire de m√™me pour le mod√®le de d√©caissement correspondant
                    dec_model_name = model_name.replace('enc', 'dec')
                    dec_models = [m for m in forecasts.keys() if 'dec' in m]
                    if dec_models:
                        avg_forecast = np.mean([forecasts[m] for m in dec_models], axis=0)
                        forecasts[dec_model_name] = avg_forecast
                    elif len(df_dec) > 0:
                        mean_value = df_dec['y_dec'].mean()
                        forecasts[dec_model_name] = np.ones(n_mois) * mean_value
                    else:
                        forecasts[dec_model_name] = np.ones(n_mois) * 800
                        
            # Cr√©ation d'un s√©lecteur pour choisir le mod√®le √† afficher avec style am√©lior√©
            available_models = [model_name for model_name in forecasts.keys() if 'enc' in model_name]
            
            if available_models:
                # Ajouter une option "Tous les mod√®les" en premier
                display_options = ["Tous les mod√®les"] + available_models
                
                # Cr√©ation de deux colonnes pour le s√©lecteur et les informations
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    selected_model = st.selectbox(
                        "Mod√®le √† afficher",
                        options=display_options,
                        index=0,  # Par d√©faut, afficher tous les mod√®les
                        help="S√©lectionnez un mod√®le sp√©cifique ou 'Tous les mod√®les' pour voir toutes les pr√©visions"
                    )
                
                with col2:
                    if selected_model == "Tous les mod√®les":
                        st.markdown(
                            '<div style="background-color: #f0f9ff; padding: 0.75rem; border-radius: 8px; border-left: 3px solid #3b82f6;">'
                            '<p style="margin: 0; color: #1e40af; font-size: 0.9rem;">'
                            f'<strong>Nombre de mod√®les :</strong> {len(available_models)}<br>'
                            f'<strong>Meilleur mod√®le :</strong> {best_model}'
                            '</p>'
                            '</div>',
                            unsafe_allow_html=True
                        )
                    else:
                        model_metrics_info = model_metrics.get(selected_model, {})
                        st.markdown(
                            '<div style="background-color: #f0f9ff; padding: 0.75rem; border-radius: 8px; border-left: 3px solid #3b82f6;">'
                            '<p style="margin: 0; color: #1e40af; font-size: 0.9rem;">'
                            f'<strong>MAE :</strong> {model_metrics_info.get("MAE", 0):,.2f}<br>'
                            f'<strong>MAPE :</strong> {model_metrics_info.get("MAPE", 0):,.2f}%'
                            '</p>'
                            '</div>',
                            unsafe_allow_html=True
                        )
                
                # Cr√©ation du graphique principal avec style am√©lior√©
                if selected_model == "Tous les mod√®les":
                    # Afficher tous les mod√®les disponibles
                    fig_main = visualizer.create_all_models_chart(df_enc, df_dec, forecasts, best_model, future_dates)
                else:
                    # Afficher uniquement le mod√®le s√©lectionn√©
                    fig_main = visualizer.create_flux_chart(df_enc, df_dec, forecasts, selected_model, future_dates)
                
                # Mise √† jour du style du graphique
                fig_main.update_layout(
                    title=dict(
                        text="√âvolution des Flux de Tr√©sorerie",
                        x=0.5,
                        y=0.95,
                        xanchor='center',
                        yanchor='top',
                        font=dict(size=20, color='#1e40af')
                    ),
                    margin=dict(t=150, l=10, r=10, b=10),
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    showlegend=True,
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="center",
                        x=0.5
                    )
                )
                
                st.markdown("<br><br>", unsafe_allow_html=True)
                st.plotly_chart(fig_main, use_container_width=True)
                st.markdown("<br><br>", unsafe_allow_html=True)
                
                # Section de commentaires explicatifs
                st.markdown(
                    '<div style="background-color: #f8fafc; padding: 1.5rem; border-radius: 8px; margin-top: 1rem; border-left: 4px solid #3b82f6;">'
                    '<h3 style="margin: 0 0 1rem 0; color: #1e40af; font-size: 1.1rem;">üìä Analyse des Pr√©visions de Tr√©sorerie</h3>'
                    '<div style="color: #475569; font-size: 0.95rem; line-height: 1.6;">'
                    '<p style="margin: 0 0 0.5rem 0;"><strong>1. M√©thodologie de Visualisation :</strong></p>'
                    '<ul style="margin: 0 0 0.5rem 0; padding-left: 1.5rem;">'
                    '<li>Donn√©es historiques : Repr√©sentation en s√©rie temporelle continue</li>'
                    '<li>Pr√©visions : Projections avec intervalles de confiance</li>'
                    '<li>Analyse comparative : Superposition des diff√©rents mod√®les</li>'
                    '</ul>'
                    
                    '<p style="margin: 0.5rem 0;"><strong>2. Param√®tres de Mod√©lisation :</strong></p>'
                    '<ul style="margin: 0 0 0.5rem 0; padding-left: 1.5rem;">'
                    '<li>Horizon de pr√©vision : ' + str(n_mois) + ' mois</li>'
                    '<li>Mod√®le optimal : ' + best_model + '</li>'
                    '<li>M√©triques de performance : MAE, MAPE, RMSE</li>'
                    '</ul>'
                    
                    '<p style="margin: 0.5rem 0;"><strong>3. Interpr√©tation des R√©sultats :</strong></p>'
                    '<ul style="margin: 0 0 0.5rem 0; padding-left: 1.5rem;">'
                    '<li>Tendance g√©n√©rale : Analyse de la direction des flux</li>'
                    '<li>Variabilit√© : √âvaluation des intervalles de confiance</li>'
                    '<li>Fiabilit√© : Comparaison des performances des mod√®les</li>'
                    '</ul>'
                    
                    '<p style="margin: 0.5rem 0;"><strong>4. Recommandations :</strong></p>'
                    '<ul style="margin: 0; padding-left: 1.5rem;">'
                    '<li>Utilisation des intervalles de confiance pour la planification</li>'
                    '<li>Surveillance des √©carts entre pr√©visions et r√©alisations</li>'
                    '<li>Actualisation r√©guli√®re des mod√®les selon les nouvelles donn√©es</li>'
                    '</ul>'
                    '</div>'
                    '</div>',
                    unsafe_allow_html=True
                )
            else:
                st.warning("Aucun mod√®le disponible pour l'affichage.")
        else:
            st.warning("Aucune pr√©vision disponible.")
            
            # Affichage des tableaux de donn√©es
            st.markdown(
                '<div style="background-color: #f8fafc; padding: 1rem; border-radius: 8px; margin: 1.5rem 0;">'            
                '<h3 style="font-size: 1.3rem; margin: 0 0 0.8rem 0; color: #334155;">D√©tail des Pr√©visions</h3>'            
                '<p style="margin: 0 0 1rem 0; color: #64748b;">Pr√©visions d√©taill√©es pour les prochains mois</p>'            
                '</div>',
                unsafe_allow_html=True
            )
            
            # S√©lection du mod√®le √† afficher dans les d√©tails
            available_models = [model_name for model_name in forecasts.keys() if 'enc' in model_name]
            
            if available_models:
                selected_detail_model = st.selectbox(
                    "S√©lectionner le mod√®le pour les d√©tails",
                    options=available_models,
                    index=0 if best_model not in available_models else available_models.index(best_model),
                    help="S√©lectionnez un mod√®le pour voir ses d√©tails de pr√©vision"
                )
                
                # Cr√©ation d'un DataFrame pour les pr√©visions
                # S'assurer que toutes les arrays ont la m√™me longueur
                enc_forecast = forecasts[selected_detail_model]
                forecast_dec_model = selected_detail_model.replace('enc', 'dec')
                dec_forecast = forecasts[forecast_dec_model] if forecast_dec_model in forecasts else np.zeros(len(future_dates))
            else:
                st.warning("Aucun mod√®le disponible pour l'affichage des d√©tails.")
                enc_forecast = np.zeros(len(future_dates))
                dec_forecast = np.zeros(len(future_dates))
            
            # V√©rifier que les longueurs correspondent
            min_length = min(len(future_dates), len(enc_forecast), len(dec_forecast))
            
            # Cr√©er le DataFrame avec des arrays de m√™me longueur
            forecast_df = pd.DataFrame({
                'Date': future_dates[:min_length],
                'Encaissements': enc_forecast[:min_length],
                'D√©caissements': dec_forecast[:min_length],
                'Solde': enc_forecast[:min_length] - dec_forecast[:min_length]
            })
            
            # Ajout de colonnes pour les variations
            if len(forecast_df) > 1:
                forecast_df['Var. Encaissements'] = forecast_df['Encaissements'].pct_change() * 100
                forecast_df['Var. D√©caissements'] = forecast_df['D√©caissements'].pct_change() * 100
                forecast_df['Var. Solde'] = forecast_df['Solde'].pct_change() * 100
                
                # Remplacer NaN par 0 pour la premi√®re ligne (sans utiliser inplace)
                forecast_df = forecast_df.copy()
                forecast_df['Var. Encaissements'] = forecast_df['Var. Encaissements'].fillna(0)
                forecast_df['Var. D√©caissements'] = forecast_df['Var. D√©caissements'].fillna(0)
                forecast_df['Var. Solde'] = forecast_df['Var. Solde'].fillna(0)
            
            # Cr√©er une copie pour l'affichage avec formatage
            display_df = forecast_df.copy()
            
            # Formatage des colonnes num√©riques
            display_df['Encaissements'] = display_df['Encaissements'].map('{:,.0f} DH'.format)
            display_df['D√©caissements'] = display_df['D√©caissements'].map('{:,.0f} DH'.format)
            display_df['Solde'] = display_df['Solde'].map('{:,.0f} DH'.format)
            
            # Formatage des colonnes de variation si elles existent
            if 'Var. Encaissements' in display_df.columns:
                display_df['Var. Encaissements'] = display_df['Var. Encaissements'].map('{:+.1f}%'.format)
                display_df['Var. D√©caissements'] = display_df['Var. D√©caissements'].map('{:+.1f}%'.format)
                display_df['Var. Solde'] = display_df['Var. Solde'].map('{:+.1f}%'.format)
            
            # Options d'affichage
            col1, col2 = st.columns([3, 1])
            with col1:
                view_option = st.radio(
                    "Mode d'affichage",
                    ["Tableau complet", "Afficher par trimestre", "Afficher par mois"],
                    horizontal=True
                )
            
            with col2:
                show_variations = st.checkbox("Afficher les variations", value=True)
            
            # Pr√©parer le DataFrame selon les options choisies
            if not show_variations and 'Var. Encaissements' in display_df.columns:
                display_df = display_df.drop(columns=['Var. Encaissements', 'Var. D√©caissements', 'Var. Solde'])
            
            # Regrouper par p√©riode si n√©cessaire
            if view_option == "Afficher par trimestre" and len(forecast_df) >= 3:
                # Convertir les dates en p√©riodes trimestrielles
                forecast_df['Trimestre'] = pd.PeriodIndex(forecast_df['Date'], freq='Q')
                
                # Grouper par trimestre
                grouped_df = forecast_df.groupby('Trimestre').agg({
                    'Encaissements': 'sum',
                    'D√©caissements': 'sum',
                    'Solde': 'mean'
                }).reset_index()
                
                # Convertir les p√©riodes en cha√Ænes de caract√®res
                grouped_df['Trimestre'] = grouped_df['Trimestre'].astype(str)
                
                # Formatage
                display_df = grouped_df.copy()
                display_df['Encaissements'] = display_df['Encaissements'].map('{:,.0f} DH'.format)
                display_df['D√©caissements'] = display_df['D√©caissements'].map('{:,.0f} DH'.format)
                display_df['Solde'] = display_df['Solde'].map('{:,.0f} DH'.format)
                
                # Renommer la colonne de date
                display_df = display_df.rename(columns={'Trimestre': 'P√©riode'})
            
            # Affichage du tableau avec style
            st.dataframe(
                display_df,
                use_container_width=True,
                column_config={
                    "Date": st.column_config.DateColumn("Date", format="MMM YYYY"),
                    "P√©riode": st.column_config.TextColumn("P√©riode"),
                    "Encaissements": st.column_config.TextColumn("Encaissements"),
                    "D√©caissements": st.column_config.TextColumn("D√©caissements"),
                    "Solde": st.column_config.TextColumn("Solde"),
                    "Var. Encaissements": st.column_config.TextColumn("Var. Encaissements"),
                    "Var. D√©caissements": st.column_config.TextColumn("Var. D√©caissements"),
                    "Var. Solde": st.column_config.TextColumn("Var. Solde")
                },
                height=400
            )
            
            # Boutons d'export
            col1, col2 = st.columns(2)
            with col1:
                csv = forecast_df.to_csv(index=False)
                st.download_button(
                    label="T√©l√©charger en CSV",
                    data=csv,
                    file_name="previsions_tresorerie.csv",
                    mime="text/csv",
                    use_container_width=True,
                    help="T√©l√©charger les pr√©visions au format CSV"
                )
            
            with col2:
                # Cr√©er un buffer Excel
                buffer = io.BytesIO()
                with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                    forecast_df.to_excel(writer, sheet_name='Pr√©visions', index=False)
                    # Acc√©der au workbook et worksheet
                    workbook = writer.book
                    worksheet = writer.sheets['Pr√©visions']
                    # Ajouter un format pour les nombres
                    num_format = workbook.add_format({'num_format': '#,##0 "DH"'})
                    pct_format = workbook.add_format({'num_format': '+0.0%'})
                    # Appliquer les formats
                    for col_num, col_name in enumerate(forecast_df.columns):
                        if col_name in ['Encaissements', 'D√©caissements', 'Solde']:
                            worksheet.set_column(col_num, col_num, 15, num_format)
                        elif 'Var.' in col_name:
                            worksheet.set_column(col_num, col_num, 15, pct_format)
                
                # Convertir le buffer en bytes pour le t√©l√©chargement
                buffer.seek(0)
                st.download_button(
                    label="T√©l√©charger en Excel",
                    data=buffer,
                    file_name="previsions_tresorerie.xlsx",
                    mime="application/vnd.ms-excel",
                    use_container_width=True,
                    help="T√©l√©charger les pr√©visions au format Excel"
                )
        
    # Fin du bloc tab_flux
    if not forecasts:
        with tab_flux:
            st.warning("Aucune pr√©vision disponible. Veuillez g√©n√©rer des pr√©visions d'abord.")
    
    # Onglet Analyse Saisonni√®re
    with tab_seasonal:
        # Cr√©ation des sous-onglets pour une meilleure organisation
        seasonal_tab1, seasonal_tab2 = st.tabs(["üìä D√©composition Saisonni√®re", "üìà Patterns Mensuels"])
        
        with seasonal_tab1:
            if forecasting_models and hasattr(forecasting_models, 'seasonal_patterns'):
                # Afficher l'analyse saisonni√®re pour les encaissements
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(
                        '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                        '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üí∞ Encaissements</h3>'            
                        '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Analyse des tendances saisonni√®res</p>'            
                        '</div>',
                        unsafe_allow_html=True
                    )
                    
                    if 'enc' in forecasting_models.seasonal_patterns:
                        fig_seasonal_enc = visualizer.create_seasonal_analysis_chart(
                            forecasting_models.seasonal_patterns['enc'],
                            title="D√©composition Saisonni√®re des Encaissements"
                        )
                        st.plotly_chart(fig_seasonal_enc, use_container_width=True)
                        
                        # Afficher des informations sur la saisonnalit√© d√©tect√©e
                        if forecasting_models.seasonal_patterns['enc'].get('has_seasonality', False):
                            seasonal_strength = forecasting_models.seasonal_patterns['enc'].get('seasonal_strength', 0) * 100
                            dominant_period = forecasting_models.seasonal_patterns['enc'].get('dominant_period', 0)
                            st.markdown(f"""
                                <div style='background-color: #f0fff4; padding: 1.5rem; border-radius: 10px; margin: 1rem 0; border-left: 5px solid #48bb78;'>
                                <h3 style='margin-top: 0; color: #2f855a;'>üìä Saisonnalit√© D√©tect√©e</h3>
                                <div style='display: flex; gap: 2rem; margin: 1rem 0;'>
                                    <div>
                                        <p style='margin: 0; color: #2f855a;'><strong>Force:</strong></p>
                                        <p style='font-size: 1.5rem; margin: 0.5rem 0; color: #2f855a;'>{seasonal_strength:.1f}%</p>
                                    </div>
                                    <div>
                                        <p style='margin: 0; color: #2f855a;'><strong>P√©riode:</strong></p>
                                        <p style='font-size: 1.5rem; margin: 0.5rem 0; color: #2f855a;'>{dominant_period} mois</p>
                                    </div>
                                </div>
                                <p style='margin: 0; color: #2f855a;'>Une saisonnalit√© forte indique des cycles r√©guliers dans vos encaissements qui peuvent √™tre utilis√©s pour am√©liorer la planification financi√®re.</p>
                        </div>
                        """, unsafe_allow_html=True)
                        else:
                            st.info("Aucune saisonnalit√© significative n'a √©t√© d√©tect√©e dans les encaissements.")
                    else:
                        st.info("Analyse saisonni√®re des encaissements non disponible.")
                
                with col2:
                    st.markdown(
                        '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                        '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üí∏ D√©caissements</h3>'            
                        '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Analyse des tendances saisonni√®res</p>'            
                        '</div>',
                        unsafe_allow_html=True
                    )
                    
                    if 'dec' in forecasting_models.seasonal_patterns:
                        fig_seasonal_dec = visualizer.create_seasonal_analysis_chart(
                            forecasting_models.seasonal_patterns['dec'],
                            title="D√©composition Saisonni√®re des D√©caissements"
                        )
                        st.plotly_chart(fig_seasonal_dec, use_container_width=True)
                        
                        # Afficher des informations sur la saisonnalit√© d√©tect√©e
                        if forecasting_models.seasonal_patterns['dec'].get('has_seasonality', False):
                            seasonal_strength = forecasting_models.seasonal_patterns['dec'].get('seasonal_strength', 0) * 100
                            dominant_period = forecasting_models.seasonal_patterns['dec'].get('dominant_period', 0)
                            st.markdown(f"""
                                <div style='background-color: #f0fff4; padding: 1.5rem; border-radius: 10px; margin: 1rem 0; border-left: 5px solid #48bb78;'>
                                <h3 style='margin-top: 0; color: #2f855a;'>üìä Saisonnalit√© D√©tect√©e</h3>
                                <div style='display: flex; gap: 2rem; margin: 1rem 0;'>
                                    <div>
                                        <p style='margin: 0; color: #2f855a;'><strong>Force:</strong></p>
                                        <p style='font-size: 1.5rem; margin: 0.5rem 0; color: #2f855a;'>{seasonal_strength:.1f}%</p>
                                    </div>
                                    <div>
                                        <p style='margin: 0; color: #2f855a;'><strong>P√©riode:</strong></p>
                                        <p style='font-size: 1.5rem; margin: 0.5rem 0; color: #2f855a;'>{dominant_period} mois</p>
                                    </div>
                                </div>
                                <p style='margin: 0; color: #2f855a;'>Une saisonnalit√© forte indique des cycles r√©guliers dans vos d√©caissements qui peuvent √™tre utilis√©s pour am√©liorer la planification financi√®re.</p>
                        </div>
                        """, unsafe_allow_html=True)
                        else:
                            st.info("Aucune saisonnalit√© significative n'a √©t√© d√©tect√©e dans les d√©caissements.")
                    else:
                        st.info("Analyse saisonni√®re des d√©caissements non disponible.")
            else:
                st.warning("Analyse saisonni√®re non disponible. Assurez-vous d'avoir activ√© l'option 'D√©tection de saisonnalit√©' dans les param√®tres avanc√©s.")
        
        with seasonal_tab2:
            if forecasting_models and hasattr(forecasting_models, 'seasonal_patterns'):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(
                        '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                        '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üìÖ Patterns Mensuels</h3>'            
                        '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Analyse des tendances par mois</p>'            
                        '</div>',
                        unsafe_allow_html=True
                    )
                    
                    if 'enc' in forecasting_models.seasonal_patterns:
                        fig_monthly_enc = visualizer.create_monthly_pattern_chart(
                            df_enc, 'y_enc', 
                            title="Patterns Mensuels des Encaissements"
                        )
                        st.plotly_chart(fig_monthly_enc, use_container_width=True)
                        
                        # Analyse comparative
                        if len(df_enc) >= 12:
                            fig_comparative = visualizer.create_comparative_analysis_chart(
                                df_enc, 'y_enc', 
                                title="Comparaison des Encaissements par P√©riode"
                            )
                            st.plotly_chart(fig_comparative, use_container_width=True)
                            
                            # √âvolution ann√©e par ann√©e
                            fig_year_over_year = visualizer.create_year_over_year_chart(
                                df_enc, 'y_enc', 
                                title="√âvolution des Encaissements Ann√©e par Ann√©e"
                            )
                            st.plotly_chart(fig_year_over_year, use_container_width=True)
                    else:
                        st.info("Patterns mensuels des encaissements non disponibles.")
                
                with col2:
                    st.markdown(
                        '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                        '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üìÖ Patterns Mensuels</h3>'            
                        '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Analyse des tendances par mois</p>'            
                        '</div>',
                        unsafe_allow_html=True
                    )
                    
                    if 'dec' in forecasting_models.seasonal_patterns:
                        fig_monthly_dec = visualizer.create_monthly_pattern_chart(
                            df_dec, 'y_dec', 
                            title="Patterns Mensuels des D√©caissements"
                        )
                        st.plotly_chart(fig_monthly_dec, use_container_width=True)
                        
                        # Analyse comparative
                        if len(df_dec) >= 12:
                            fig_comparative = visualizer.create_comparative_analysis_chart(
                                df_dec, 'y_dec', 
                                title="Comparaison des D√©caissements par P√©riode"
                            )
                            st.plotly_chart(fig_comparative, use_container_width=True)
                            
                            # √âvolution ann√©e par ann√©e
                            fig_year_over_year = visualizer.create_year_over_year_chart(
                                df_dec, 'y_dec', 
                                title="√âvolution des D√©caissements Ann√©e par Ann√©e"
                            )
                            st.plotly_chart(fig_year_over_year, use_container_width=True)
                    else:
                        st.info("Patterns mensuels des d√©caissements non disponibles.")
            else:
                st.warning("Analyse des patterns mensuels non disponible. Assurez-vous d'avoir activ√© l'option 'D√©tection de saisonnalit√©' dans les param√®tres avanc√©s.")
    
    # Onglet D√©tection d'Anomalies
    with tab_anomalies:
        if forecasting_models and hasattr(forecasting_models, 'anomalies'):
            # Cr√©ation des sous-onglets
            anomaly_tab1, anomaly_tab2 = st.tabs(["üìä Visualisation", "üìã D√©tails"])
            
            with anomaly_tab1:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(
                        '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                        '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üìà Encaissements</h3>'            
                        '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Analyse des anomalies dans les encaissements</p>'            
                        '</div>',
                        unsafe_allow_html=True
                    )
                    
                    if 'enc' in forecasting_models.anomalies:
                        fig_anomalies_enc = visualizer.create_anomaly_detection_chart(
                            forecasting_models.anomalies['enc'],
                            title="D√©tection d'Anomalies dans les Encaissements"
                        )
                        st.plotly_chart(fig_anomalies_enc, use_container_width=True)
                        
                        # Afficher des informations sur les anomalies d√©tect√©es
                        if forecasting_models.anomalies['enc'].get('anomalies_detected', False):
                            anomaly_count = forecasting_models.anomalies['enc'].get('anomaly_count', 0)
                            anomaly_percent = forecasting_models.anomalies['enc'].get('anomaly_percent', 0)
                            
                            st.markdown(f"""
                            <div style='background-color: #fff8e6; padding: 1rem; border-radius: 8px; margin: 1rem 0; border-left: 5px solid #f59e0b;'>
                            <h3 style='margin-top: 0; color: #b45309;'>R√©sum√© des Anomalies</h3>
                            <p><strong>{anomaly_count}</strong> anomalies d√©tect√©es ({anomaly_percent:.1f}% des donn√©es)</p>
                            <p>Les anomalies peuvent indiquer des transactions inhabituelles ou des erreurs de saisie.</p>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.success("‚úÖ Aucune anomalie significative n'a √©t√© d√©tect√©e dans les encaissements.")
                    else:
                        st.info("‚ÑπÔ∏è D√©tection d'anomalies pour les encaissements non disponible.")
                
                with col2:
                    st.markdown(
                        '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                        '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üìâ D√©caissements</h3>'            
                        '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Analyse des anomalies dans les d√©caissements</p>'            
                        '</div>',
                        unsafe_allow_html=True
                    )
                    
                    if 'dec' in forecasting_models.anomalies:
                        fig_anomalies_dec = visualizer.create_anomaly_detection_chart(
                            forecasting_models.anomalies['dec'],
                            title="D√©tection d'Anomalies dans les D√©caissements"
                        )
                        st.plotly_chart(fig_anomalies_dec, use_container_width=True)
                        
                        # Afficher des informations sur les anomalies d√©tect√©es
                        if forecasting_models.anomalies['dec'].get('anomalies_detected', False):
                            anomaly_count = forecasting_models.anomalies['dec'].get('anomaly_count', 0)
                            anomaly_percent = forecasting_models.anomalies['dec'].get('anomaly_percent', 0)
                            
                            st.markdown(f"""
                            <div style='background-color: #fff8e6; padding: 1rem; border-radius: 8px; margin: 1rem 0; border-left: 5px solid #f59e0b;'>
                            <h3 style='margin-top: 0; color: #b45309;'>R√©sum√© des Anomalies</h3>
                            <p><strong>{anomaly_count}</strong> anomalies d√©tect√©es ({anomaly_percent:.1f}% des donn√©es)</p>
                            <p>Les anomalies peuvent indiquer des transactions inhabituelles ou des erreurs de saisie.</p>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.success("‚úÖ Aucune anomalie significative n'a √©t√© d√©tect√©e dans les d√©caissements.")
                    else:
                        st.info("‚ÑπÔ∏è D√©tection d'anomalies pour les d√©caissements non disponible.")
            
            with anomaly_tab2:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(
                        '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                        '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üìä D√©tails des Anomalies - Encaissements</h3>'            
                        '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Liste d√©taill√©e des anomalies d√©tect√©es</p>'            
                        '</div>',
                        unsafe_allow_html=True
                    )
                    
                    if 'enc' in forecasting_models.anomalies:
                        if 'anomaly_data' in forecasting_models.anomalies['enc']:
                            anomaly_df = forecasting_models.anomalies['enc']['anomaly_data']
                            if not anomaly_df.empty:
                                # Bloc de statistiques avant le tableau
                                st.markdown("##### üìà Statistiques des Anomalies d'Encaissements")
                                enc_stats = {
                                    "Nombre d'anomalies": len(anomaly_df),
                                    "Montant total des anomalies": f"{anomaly_df['y_enc'].sum():,.0f} DH",
                                    "Montant moyen par anomalie": f"{anomaly_df['y_enc'].mean():,.0f} DH",
                                    "√âcart-type des anomalies": f"{anomaly_df['y_enc'].std():,.0f} DH" if len(anomaly_df) > 1 else "Non calculable (une seule anomalie)",
                                    "Anomalie la plus importante": f"{anomaly_df['y_enc'].max():,.0f} DH",
                                    "Date de la derni√®re anomalie": anomaly_df['ds'].max().strftime('%d/%m/%Y')
                                }
                                for stat_name, stat_value in enc_stats.items():
                                    st.metric(stat_name, stat_value)
                            else:
                                st.info("‚ÑπÔ∏è Aucune anomalie d√©tect√©e dans les encaissements.")
                        else:
                            st.info("‚ÑπÔ∏è Donn√©es d'anomalies non disponibles pour les encaissements.")
                    else:
                        st.info("‚ÑπÔ∏è D√©tection d'anomalies non disponible pour les encaissements.")
                
                with col2:
                    st.markdown(
                        '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                        '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üìä D√©tails des Anomalies - D√©caissements</h3>'            
                        '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Liste d√©taill√©e des anomalies d√©tect√©es</p>'            
                        '</div>',
                        unsafe_allow_html=True
                    )
                    
                    if 'dec' in forecasting_models.anomalies:
                        if 'anomaly_data' in forecasting_models.anomalies['dec']:
                            anomaly_df = forecasting_models.anomalies['dec']['anomaly_data']
                            if not anomaly_df.empty:
                                # Bloc de statistiques avant le tableau
                                st.markdown("##### üìà Statistiques des Anomalies de D√©caissements")
                                dec_stats = {
                                    "Nombre d'anomalies": len(anomaly_df),
                                    "Montant total des anomalies": f"{anomaly_df['y_dec'].sum():,.0f} DH",
                                    "Montant moyen par anomalie": f"{anomaly_df['y_dec'].mean():,.0f} DH",
                                    "√âcart-type des anomalies": f"{anomaly_df['y_dec'].std():,.0f} DH" if len(anomaly_df) > 1 else "Non calculable (une seule anomalie)",
                                    "Anomalie la plus importante": f"{anomaly_df['y_dec'].max():,.0f} DH",
                                    "Date de la derni√®re anomalie": anomaly_df['ds'].max().strftime('%d/%m/%Y')
                                }
                                for stat_name, stat_value in dec_stats.items():
                                    st.metric(stat_name, stat_value)
                            else:
                                st.info("‚ÑπÔ∏è Aucune anomalie d√©tect√©e dans les d√©caissements.")
                        else:
                            st.info("‚ÑπÔ∏è Donn√©es d'anomalies non disponibles pour les d√©caissements.")
                    else:
                        st.info("‚ÑπÔ∏è D√©tection d'anomalies non disponible pour les d√©caissements.")
            
            # Conseils pour l'interpr√©tation des anomalies
            with st.expander("üí° Comment interpr√©ter les anomalies?"):
                st.markdown("""
                ### Guide d'interpr√©tation des anomalies
                
                Les anomalies sont des valeurs qui s'√©cartent significativement du comportement normal des donn√©es. Elles peuvent indiquer :
                
                #### üîç Types d'anomalies
                - **Transactions exceptionnelles** : Paiements importants, remboursements, ou √©v√©nements financiers inhabituels
                - **Erreurs de saisie** : Donn√©es incorrectes ou mal saisies
                - **Changements structurels** : Modifications dans votre activit√© ou votre mod√®le √©conomique
                
                #### üìä Score d'anomalie
                - Plus le score est √©lev√©, plus l'anomalie est significative
                - Score > 3 : Anomalie majeure √† investiguer
                - Score entre 2 et 3 : Anomalie mod√©r√©e √† surveiller
                - Score < 2 : Anomalie mineure, probablement normale
                
                #### üéØ Actions recommand√©es
                1. **V√©rification** : Confirmer l'exactitude des transactions identifi√©es
                2. **Correction** : Rectifier les erreurs √©ventuelles dans les donn√©es
                3. **Analyse** : Comprendre la nature des anomalies l√©gitimes
                4. **Pr√©vention** : Mettre en place des contr√¥les pour √©viter les erreurs futures
                
                #### ‚ö†Ô∏è Points d'attention
                - Ne pas ignorer syst√©matiquement les anomalies
                - Documenter les raisons des anomalies l√©gitimes
                - Utiliser ces informations pour am√©liorer vos processus
                """)
        else:
            st.warning("‚ö†Ô∏è D√©tection d'anomalies non disponible. Assurez-vous d'avoir activ√© l'option 'D√©tection d'anomalies' dans les param√®tres avanc√©s.")
    
    # Onglet Analyses Avanc√©es
    with tab_advanced:
        # Cr√©ation des sous-onglets
        advanced_tab1, advanced_tab2, advanced_tab3 = st.tabs(["üìà Analyse des Flux", "üìä Statistiques Avanc√©es", "üéØ Recommandations"])
        
        with advanced_tab1:
            # Titre principal avec espacement
            st.markdown('<div style="margin-top: 0; margin-bottom: 2rem;">', unsafe_allow_html=True)
            st.markdown(
                '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px;">'            
                '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üìà Analyse des Flux de Tr√©sorerie et Pr√©visions</h3>'            
                '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Visualisation d√©taill√©e des flux et pr√©visions</p>'            
                '</div>',
                unsafe_allow_html=True
            )
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Cr√©ation et affichage du graphique avec animation
            fig_flux = visualizer.create_flux_chart(df_enc, df_dec, forecasts, best_model, future_dates)
            st.plotly_chart(fig_flux, use_container_width=True, key="flux_chart")
            
            # Analyse des tendances
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(
                    '<div style="background-color: #f0f9ff; padding: 1rem; border-radius: 8px; margin: 1rem 0;">'            
                    '<h4 style="font-size: 1.1rem; margin: 0; color: #1e40af;">üìà Tendance Encaissements</h4>'            
                    '</div>',
                    unsafe_allow_html=True
                )
                if len(df_enc) >= 3:
                    enc_trend = (df_enc['y_enc'].iloc[-1] / df_enc['y_enc'].iloc[-3] - 1) * 100
                    st.metric(
                        "Variation sur 3 mois",
                        f"{enc_trend:.1f}%",
                        delta_color="normal"
                    )
            
            with col2:
                st.markdown(
                    '<div style="background-color: #f0f9ff; padding: 1rem; border-radius: 8px; margin: 1rem 0;">'            
                    '<h4 style="font-size: 1.1rem; margin: 0; color: #1e40af;">üìâ Tendance D√©caissements</h4>'            
                    '</div>',
                    unsafe_allow_html=True
                )
                if len(df_dec) >= 3:
                    dec_trend = (df_dec['y_dec'].iloc[-1] / df_dec['y_dec'].iloc[-3] - 1) * 100
                    st.metric(
                        "Variation sur 3 mois",
                        f"{dec_trend:.1f}%",
                        delta_color="inverse"
                    )
            
            with col3:
                st.markdown(
                    '<div style="background-color: #f0f9ff; padding: 1rem; border-radius: 8px; margin: 1rem 0;">'            
                    '<h4 style="font-size: 1.1rem; margin: 0; color: #1e40af;">üí∞ Solde de Tr√©sorerie</h4>'            
                    '</div>',
                    unsafe_allow_html=True
                )
                if len(df_enc) >= 1 and len(df_dec) >= 1:
                    solde = df_enc['y_enc'].iloc[-1] - df_dec['y_dec'].iloc[-1]
                    st.metric(
                        "Solde actuel",
                        f"{solde:,.0f} DH",
                        delta_color="normal" if solde >= 0 else "inverse"
                    )
        
        with advanced_tab2:
            st.markdown(
                '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üìä Statistiques Avanc√©es</h3>'            
                '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Analyse approfondie des indicateurs financiers</p>'            
                '</div>',
                unsafe_allow_html=True
            )
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(
                    '<div style="background-color: #f0f9ff; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">'            
                    '<h4 style="font-size: 1.1rem; margin: 0; color: #1e40af;">üìà Encaissements</h4>'            
                    '</div>',
                    unsafe_allow_html=True
                )
                
                # Statistiques des encaissements
                enc_stats = {
                    "Moyenne": df_enc['y_enc'].mean(),
                    "M√©diane": df_enc['y_enc'].median(),
                    "√âcart-type": df_enc['y_enc'].std(),
                    "Minimum": df_enc['y_enc'].min(),
                    "Maximum": df_enc['y_enc'].max(),
                    "Croissance annuelle": ((df_enc['y_enc'].iloc[-1] / df_enc['y_enc'].iloc[0]) ** (12/len(df_enc)) - 1) * 100 if len(df_enc) > 0 else 0
                }
                
                for stat, value in enc_stats.items():
                    st.metric(
                        stat,
                        f"{value:,.0f} DH" if stat != "Croissance annuelle" else f"{value:.1f}%",
                        delta_color="normal"
                    )
            
            with col2:
                st.markdown(
                    '<div style="background-color: #f0f9ff; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">'            
                    '<h4 style="font-size: 1.1rem; margin: 0; color: #1e40af;">üìâ D√©caissements</h4>'            
                    '</div>',
                    unsafe_allow_html=True
                )
                
                # Statistiques des d√©caissements
                dec_stats = {
                    "Moyenne": df_dec['y_dec'].mean(),
                    "M√©diane": df_dec['y_dec'].median(),
                    "√âcart-type": df_dec['y_dec'].std(),
                    "Minimum": df_dec['y_dec'].min(),
                    "Maximum": df_dec['y_dec'].max(),
                    "Croissance annuelle": ((df_dec['y_dec'].iloc[-1] / df_dec['y_dec'].iloc[0]) ** (12/len(df_dec)) - 1) * 100 if len(df_dec) > 0 else 0
                }
                
                for stat, value in dec_stats.items():
                    st.metric(
                        stat,
                        f"{value:,.0f} DH" if stat != "Croissance annuelle" else f"{value:.1f}%",
                        delta_color="inverse"
                    )
            
            # Ratios financiers
            st.markdown(
                '<div style="background-color: #f0f9ff; padding: 1rem; border-radius: 8px; margin: 1.5rem 0;">'            
                '<h4 style="font-size: 1.1rem; margin: 0; color: #1e40af;">üí∞ Ratios Financiers</h4>'            
                '</div>',
                unsafe_allow_html=True
            )
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # Ratio de couverture
                coverage_ratio = df_enc['y_enc'].mean() / df_dec['y_dec'].mean() if df_dec['y_dec'].mean() > 0 else 0
                st.metric(
                    "Ratio de Couverture",
                    f"{coverage_ratio:.2f}",
                    delta_color="normal" if coverage_ratio >= 1 else "inverse"
                )
            
            with col2:
                # Marge de s√©curit√©
                safety_margin = (df_enc['y_enc'].mean() - df_dec['y_dec'].mean()) / df_dec['y_dec'].mean() * 100 if df_dec['y_dec'].mean() > 0 else 0
                st.metric(
                    "Marge de S√©curit√©",
                    f"{safety_margin:.1f}%",
                    delta_color="normal" if safety_margin >= 0 else "inverse"
                )
            
            with col3:
                # Indice de stabilit√©
                stability_index = 1 - (df_enc['y_enc'].std() / df_enc['y_enc'].mean()) if df_enc['y_enc'].mean() > 0 else 0
                st.metric(
                    "Indice de Stabilit√©",
                    f"{stability_index:.2f}",
                    delta_color="normal" if stability_index >= 0.5 else "inverse"
                )
        
        with advanced_tab3:
            st.markdown(
                '<div style="background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 1.5rem; border-radius: 10px; margin-bottom: 1.5rem;">'            
                '<h3 style="font-size: 1.3rem; margin: 0; color: white;">üéØ Recommandations Strat√©giques</h3>'            
                '<p style="margin: 0.5rem 0 0 0; color: #e2e8f0; font-size: 1rem;">Suggestions pour optimiser la gestion de tr√©sorerie</p>'            
                '</div>',
                unsafe_allow_html=True
            )
            
            # Analyse de la situation actuelle
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(
                    '<div style="background-color: #f0f9ff; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">'            
                    '<h4 style="font-size: 1.1rem; margin: 0; color: #1e40af;">üìä Situation Actuelle</h4>'            
                    '</div>',
                    unsafe_allow_html=True
                )
                
                # √âvaluation de la situation
                if coverage_ratio >= 1.2:
                    st.success("‚úÖ **Tr√©sorerie saine** : Les encaissements couvrent largement les d√©caissements.")
                elif coverage_ratio >= 1:
                    st.info("‚ÑπÔ∏è **Tr√©sorerie √©quilibr√©e** : Les encaissements couvrent juste les d√©caissements.")
                else:
                    st.warning("‚ö†Ô∏è **Attention** : Les encaissements ne couvrent pas suffisamment les d√©caissements.")
                
                if safety_margin >= 20:
                    st.success("‚úÖ **Bonne marge de s√©curit√©** : Capacit√© d'absorption des chocs financiers.")
                elif safety_margin >= 0:
                    st.info("‚ÑπÔ∏è **Marge de s√©curit√© limit√©e** : Surveiller les flux de tr√©sorerie.")
                else:
                    st.warning("‚ö†Ô∏è **Marge de s√©curit√© n√©gative** : Risque de tr√©sorerie √©lev√©.")
            
            with col2:
                st.markdown(
                            '<div style="background-color: #f0f9ff; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">'            
                            '<h4 style="font-size: 1.1rem; margin: 0; color: #1e40af;">üéØ Recommandations</h4>'            
                    '</div>',
                    unsafe_allow_html=True
                )
                
                # Recommandations bas√©es sur l'analyse
                if coverage_ratio < 1:
                    st.markdown("""
                    #### Actions prioritaires :
                    1. **Optimiser les encaissements**
                       - Acc√©l√©rer le recouvrement des cr√©ances
                       - Ren√©gocier les d√©lais de paiement
                    2. **Ma√Ætriser les d√©caissements**
                       - R√©duire les d√©penses non essentielles
                       - Optimiser les d√©lais de paiement
                    """)
                elif safety_margin < 20:
                    st.markdown("""
                    #### Actions recommand√©es :
                    1. **Renforcer la marge de s√©curit√©**
                       - Constituer une r√©serve de tr√©sorerie
                       - Diversifier les sources de revenus
                    2. **Am√©liorer la pr√©vision**
                       - Affiner les pr√©visions de tr√©sorerie
                       - Mettre en place des alertes
                    """)
                else:
                    st.markdown("""
                    #### Actions d'optimisation :
                    1. **Maintenir la performance**
                       - Continuer le suivi rigoureux
                       - Maintenir les bonnes pratiques
                    2. **Opportunit√©s d'investissement**
                       - √âvaluer les placements √† court terme
                       - Optimiser la gestion des exc√©dents
                    """)
    
    with tab_models:
        # En-t√™te avec style am√©lior√©
        st.markdown(
            '<div style="background-color: #f0f9ff; padding: 1rem; border-radius: 8px; margin-bottom: 1.5rem;">'            
            '<h2 style="font-size: 1.5rem; margin: 0; color: #1e40af;">üîç Comparaison des Mod√®les de Pr√©vision</h2>'            
            '<p style="margin: 0.5rem 0 0 0; color: #6b7280;">Analyse comparative des performances des diff√©rents mod√®les</p>'            
            '</div>',
            unsafe_allow_html=True
        )
        
        # V√©rifier si des pr√©visions sont disponibles
        if not forecasts:
            st.markdown(
                '<div style="background-color: #fff7ed; padding: 1rem; border-radius: 8px; margin: 1rem 0; border-left: 4px solid #f59e0b;">'                
                '<p style="margin: 0; color: #92400e;"><strong>Attention :</strong> Aucune pr√©vision n\'est disponible. Veuillez g√©n√©rer des pr√©visions.</p>'                
                '</div>',
                unsafe_allow_html=True
            )
            show_model_comparison = False
        else:
            show_model_comparison = True
        
        # Cr√©ation des sous-onglets pour les encaissements et d√©caissements avec style am√©lior√©
        subtab1, subtab2, subtab3 = st.tabs([
            "üìà Encaissements", 
            "üìâ D√©caissements", 
            "üìä M√©triques de Performance"
        ])
        
        if show_model_comparison:
            with subtab1:
                # En-t√™te avec style am√©lior√©
                st.markdown(
                    '<div style="background-color: #f0f9ff; padding: 0.75rem; border-radius: 8px; margin-bottom: 1rem;">'                    
                    '<h3 style="font-size: 1.2rem; margin: 0; color: #1e40af;">Pr√©visions des Encaissements par Mod√®le</h3>'                    
                    '</div>',
                    unsafe_allow_html=True
                )
                
                # Cr√©ation et affichage du graphique avec animation
                st.markdown('<div class="plotly-chart">', unsafe_allow_html=True)
                fig_enc_comparison, fig_dec_comparison, fig_ecarts = visualizer.create_model_comparison_chart(
                    df_enc, df_dec, forecasts, best_model, future_dates
                )
                
                # Am√©lioration: Ajouter une l√©gende interactive
                fig_enc_comparison.update_layout(
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1,
                        itemclick="toggleothers"
                    )
                )
                
                # Am√©lioration: Ajouter des intervalles de confiance si disponibles
                prophet_enc_model = 'prophet_enc'
                if prophet_enc_model in forecasts and forecasting_models and hasattr(forecasting_models, 'models') and prophet_enc_model in forecasting_models.models:
                    try:
                        # Cr√©er un dataframe futur pour Prophet
                        future = pd.DataFrame({'ds': future_dates})
                        # G√©n√©rer des pr√©visions avec intervalles de confiance
                        forecast = forecasting_models.models[prophet_enc_model].predict(future)
                        
                        # Ajouter l'intervalle de confiance sup√©rieur
                        fig_enc_comparison.add_trace(go.Scatter(
                            x=future_dates,
                            y=forecast['yhat_upper'].values,
                            mode='lines',
                            line=dict(width=0),
                            name='IC sup√©rieur (95%)',
                            showlegend=True
                        ))
                        
                        # Ajouter l'intervalle de confiance inf√©rieur
                        fig_enc_comparison.add_trace(go.Scatter(
                            x=future_dates,
                            y=forecast['yhat_lower'].values,
                            mode='lines',
                            line=dict(width=0),
                            fill='tonexty',
                            fillcolor='rgba(0, 128, 0, 0.2)',
                            name='IC inf√©rieur (95%)',
                            showlegend=True
                        ))
                    except Exception as e:
                        st.warning(f"Impossible d'afficher les intervalles de confiance: {e}")
                
                st.plotly_chart(fig_enc_comparison, use_container_width=True, key="enc_comparison")
                st.markdown('</div>', unsafe_allow_html=True)
                
                # Explication du graphique
                st.markdown(
                    '<div style="background-color: #f8fafc; padding: 0.75rem; border-radius: 8px; margin-top: 1rem; border-left: 3px solid #3b82f6;">'                    
                    '<p style="margin: 0; font-style: italic; color: #475569; font-size: 0.9rem;">'                    
                    'Ce graphique compare les pr√©visions d\'encaissements g√©n√©r√©es par les diff√©rents mod√®les. '                    
                    f'Le mod√®le <strong>{best_model}</strong> (en surbrillance) a √©t√© identifi√© comme le plus performant. '                    
                    'Cliquez sur les √©l√©ments de la l√©gende pour afficher/masquer les mod√®les.'                    
                    '</p>'                    
                    '</div>',
                    unsafe_allow_html=True
                )
            
            with subtab2:
                # En-t√™te avec style am√©lior√©
                st.markdown(
                    '<div style="background-color: #f0f9ff; padding: 0.75rem; border-radius: 8px; margin-bottom: 1rem;">'                    
                    '<h3 style="font-size: 1.2rem; margin: 0; color: #1e40af;">Pr√©visions des D√©caissements par Mod√®le</h3>'                    
                    '</div>',
                    unsafe_allow_html=True
                )
                
                # Am√©lioration: Ajouter une l√©gende interactive
                fig_dec_comparison.update_layout(
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1,
                        itemclick="toggleothers"
                    )
                )
                
                # Am√©lioration: Ajouter des intervalles de confiance si disponibles
                prophet_dec_model = 'prophet_dec'
                if prophet_dec_model in forecasts and forecasting_models and hasattr(forecasting_models, 'models') and prophet_dec_model in forecasting_models.models:
                    try:
                        # Cr√©er un dataframe futur pour Prophet
                        future = pd.DataFrame({'ds': future_dates})
                        # G√©n√©rer des pr√©visions avec intervalles de confiance
                        forecast = forecasting_models.models[prophet_dec_model].predict(future)
                        
                        # Ajouter l'intervalle de confiance sup√©rieur
                        fig_dec_comparison.add_trace(go.Scatter(
                            x=future_dates,
                            y=forecast['yhat_upper'].values,
                            mode='lines',
                            line=dict(width=0),
                            name='IC sup√©rieur (95%)',
                            showlegend=True
                        ))
                        
                        # Ajouter l'intervalle de confiance inf√©rieur
                        fig_dec_comparison.add_trace(go.Scatter(
                            x=future_dates,
                            y=forecast['yhat_lower'].values,
                            mode='lines',
                            line=dict(width=0),
                            fill='tonexty',
                            fillcolor='rgba(220, 20, 60, 0.2)',
                            name='IC inf√©rieur (95%)',
                            showlegend=True
                        ))
                    except Exception as e:
                        st.warning(f"Impossible d'afficher les intervalles de confiance: {e}")
                
                # Cr√©ation et affichage du graphique avec animation
                st.markdown('<div class="plotly-chart">', unsafe_allow_html=True)
                st.plotly_chart(fig_dec_comparison, use_container_width=True, key="dec_comparison")
                st.markdown('</div>', unsafe_allow_html=True)
                
                # Explication du graphique
                st.markdown(
                    '<div style="background-color: #f8fafc; padding: 0.75rem; border-radius: 8px; margin-top: 1rem; border-left: 3px solid #3b82f6;">'                    
                    '<p style="margin: 0; font-style: italic; color: #475569; font-size: 0.9rem;">'                    
                    'Ce graphique compare les pr√©visions de d√©caissements g√©n√©r√©es par les diff√©rents mod√®les. '                    
                    f'Le mod√®le <strong>{best_model.replace("enc", "dec")}</strong> (en surbrillance) a √©t√© identifi√© comme le plus performant. '                    
                    'Cliquez sur les √©l√©ments de la l√©gende pour afficher/masquer les mod√®les.'                    
                    '</p>'                    
                    '</div>',
                    unsafe_allow_html=True
                )
            
            with subtab3:
                # En-t√™te avec style am√©lior√©
                st.markdown(
                    '<div style="background-color: #f0f9ff; padding: 0.75rem; border-radius: 8px; margin-bottom: 1rem;">'                    
                    '<h3 style="font-size: 1.2rem; margin: 0; color: #1e40af;">M√©triques de Performance des Mod√®les</h3>'                    
                    '</div>',
                    unsafe_allow_html=True
                )
                
                # Affichage du meilleur mod√®le avec style am√©lior√©
                if best_model:
                    st.markdown(
                        f'<div style="background-color: #ecfdf5; padding: 1rem; border-radius: 8px; margin: 1rem 0; border-left: 4px solid #10b981;">'                        
                        f'<p style="margin: 0; color: #065f46;"><strong>Meilleur mod√®le :</strong> {best_model}</p>'                        
                        f'<p style="margin: 0.5rem 0 0 0; color: #065f46;"><strong>Erreur (MAE) :</strong> {model_metrics.get(best_model, {}).get("MAE", 0):.2f}</p>'                        
                        f'<p style="margin: 0.5rem 0 0 0; color: #065f46;"><strong>Erreur (RMSE) :</strong> {model_metrics.get(best_model, {}).get("RMSE", 0):.2f}</p>'                        
                        f'<p style="margin: 0.5rem 0 0 0; color: #065f46;"><strong>Erreur (MAPE) :</strong> {model_metrics.get(best_model, {}).get("MAPE", 0):.2f}%</p>'                        
                        f'</div>',
                        unsafe_allow_html=True
                    )
                else:
                    st.warning("Aucun mod√®le n'a √©t√© identifi√© comme le meilleur. Veuillez v√©rifier les param√®tres de s√©lection.")
                
                # Affichage de tous les mod√®les disponibles
                st.markdown("### Tous les mod√®les disponibles")
                
                # Cr√©er un DataFrame pour afficher tous les mod√®les disponibles dans forecasts
                available_models = []
                for model_name in forecasts.keys():
                    if 'enc' in model_name:  # Ne prendre que les mod√®les d'encaissement pour √©viter les doublons
                        model_type = model_name.replace('_enc', '')
                        available_models.append({
                            "Mod√®le": model_type,
                            "Disponible": "‚úÖ",
                            "MAE": model_metrics.get(model_name, {}).get("MAE", 0),
                            "RMSE": model_metrics.get(model_name, {}).get("RMSE", 0),
                            "MAPE (%)": model_metrics.get(model_name, {}).get("MAPE", 0),
                            "Meilleur": "‚úÖ" if model_name == best_model else ""
                        })
                
                if available_models:
                    # Trier par MAE croissant
                    available_models_df = pd.DataFrame(available_models).sort_values("MAE")
                    
                    # Formater les colonnes num√©riques
                    available_models_df["MAE"] = available_models_df["MAE"].map('{:,.2f}'.format)
                    available_models_df["MAPE (%)"] = available_models_df["MAPE (%)"].map('{:,.2f}'.format)
                    
                    # Afficher le tableau
                    st.dataframe(
                        available_models_df,
                        use_container_width=True,
                        column_config={
                            "Mod√®le": st.column_config.TextColumn("Mod√®le"),
                            "Disponible": st.column_config.TextColumn("Disponible"),
                            "MAE": st.column_config.TextColumn("MAE"),
                            "MAPE (%)": st.column_config.TextColumn("MAPE (%)"),
                            "Meilleur": st.column_config.TextColumn("Meilleur Mod√®le")
                        },
                        hide_index=True
                    )
                else:
                    st.warning("Aucun mod√®le disponible pour l'affichage.")
                
                
                # Am√©lioration: Tableau d√©taill√© des m√©triques pour tous les mod√®les
                st.markdown("### Tableau d√©taill√© des m√©triques")
                
                if model_metrics:
                    # Cr√©er un DataFrame des m√©triques pour tous les mod√®les
                    metrics_data = {}
                    for model, metrics in model_metrics.items():
                        if 'enc' in model:  # Filtrer pour n'afficher que les mod√®les d'encaissement
                            metrics_data[model] = {
                                'MAE': metrics.get('MAE', 0),
                                'MAPE': metrics.get('MAPE', 0)
                            }
                    
                    metrics_df = pd.DataFrame.from_dict(metrics_data, orient='index')
                    if not metrics_df.empty:
                        metrics_df = metrics_df.sort_values('MAE')
                        
                        # Cr√©er une colonne pour indiquer le meilleur mod√®le
                        metrics_df['Meilleur'] = metrics_df.index == best_model
                        metrics_df['Meilleur'] = metrics_df['Meilleur'].map({True: '‚úÖ', False: ''})
                        
                        # Formater les colonnes pour l'affichage
                        metrics_df_display = metrics_df.copy()
                        metrics_df_display['MAE'] = metrics_df_display['MAE'].map('{:,.2f}'.format)
                        metrics_df_display['MAPE'] = metrics_df_display['MAPE'].map('{:,.2f}%'.format)
                        
                        # Afficher le tableau avec style
                        st.dataframe(
                            metrics_df_display,
                            use_container_width=True,
                            column_config={
                                "index": st.column_config.TextColumn("Mod√®le"),
                                "MAE": st.column_config.TextColumn("MAE (Erreur Absolue Moyenne)"),
                                "MAPE": st.column_config.TextColumn("MAPE (% d'Erreur)"),
                                "Meilleur": st.column_config.TextColumn("Meilleur Mod√®le")
                            }
                        )
                    else:
                        st.warning("Aucune m√©trique disponible pour les mod√®les d'encaissement.")
                else:
                    st.warning("Aucune m√©trique disponible.")
                
                # Cr√©ation et affichage du graphique des m√©triques avec animation
                st.markdown('<div class="plotly-chart">', unsafe_allow_html=True)
                fig_metrics = visualizer.create_metrics_chart(model_metrics)
                st.plotly_chart(fig_metrics, use_container_width=True, key="metrics_chart")
                st.markdown('</div>', unsafe_allow_html=True)
                
                # Am√©lioration: Diagnostic du meilleur mod√®le
                with st.expander("Diagnostic du meilleur mod√®le", expanded=False):
                    if 'prophet' in best_model and forecasting_models and hasattr(forecasting_models, 'models') and best_model in forecasting_models.models:
                        try:
                            st.markdown("### Composantes du mod√®le Prophet")
                            # Cr√©er un dataframe futur pour Prophet
                            future = pd.DataFrame({'ds': future_dates})
                            # G√©n√©rer des pr√©visions avec composantes
                            forecast = forecasting_models.models[best_model].predict(future)
                            
                            # Cr√©er un graphique pour la tendance
                            fig_trend = px.line(
                                x=forecast['ds'], 
                                y=forecast['trend'],
                                labels={"x": "Date", "y": "Tendance"},
                                title="Tendance d√©tect√©e par Prophet"
                            )
                            st.plotly_chart(fig_trend, use_container_width=True)
                            
                            # Afficher les composantes saisonni√®res si disponibles
                            if 'yearly' in forecast.columns:
                                fig_yearly = px.line(
                                    x=forecast['ds'], 
                                    y=forecast['yearly'],
                                    labels={"x": "Date", "y": "Saisonnalit√© Annuelle"},
                                    title="Saisonnalit√© Annuelle"
                                )
                                st.plotly_chart(fig_yearly, use_container_width=True)
                            
                            if 'weekly' in forecast.columns:
                                fig_weekly = px.line(
                                    x=forecast['ds'], 
                                    y=forecast['weekly'],
                                    labels={"x": "Date", "y": "Saisonnalit√© Hebdomadaire"},
                                    title="Saisonnalit√© Hebdomadaire"
                                )
                                st.plotly_chart(fig_weekly, use_container_width=True)
                        except Exception as e:
                            st.warning(f"Impossible d'afficher les composantes du mod√®le Prophet: {e}")
                    
                    # Analyse des r√©sidus
                    if best_model in forecasts and len(df_enc) >= len(forecasts[best_model]):
                        try:
                            st.markdown("### Analyse des r√©sidus")
                            # Calculer et afficher les r√©sidus
                            y_true = df_enc['y_enc'].values[-len(forecasts[best_model]):]
                            y_pred = forecasts[best_model]
                            residuals = y_true - y_pred
                            
                            fig_residuals = px.scatter(
                                x=np.arange(len(residuals)), 
                                y=residuals,
                                labels={"x": "Observation", "y": "R√©sidu"},
                                title="R√©sidus du mod√®le"
                            )
                            fig_residuals.add_hline(y=0, line_dash="dash", line_color="red")
                            st.plotly_chart(fig_residuals, use_container_width=True)
                            
                            # Histogramme des r√©sidus
                            fig_hist = px.histogram(
                                x=residuals,
                                labels={"x": "R√©sidu", "y": "Fr√©quence"},
                                title="Distribution des r√©sidus"
                            )
                            st.plotly_chart(fig_hist, use_container_width=True)
                        except Exception as e:
                            st.warning(f"Impossible d'afficher l'analyse des r√©sidus: {e}")
                
                # Explication des m√©triques
                st.markdown(
                    '<div style="background-color: #f8fafc; padding: 0.75rem; border-radius: 8px; margin-top: 1rem; border-left: 3px solid #3b82f6;">'                    
                    '<p style="margin: 0; font-style: italic; color: #475569; font-size: 0.9rem;">'                    
                    '<strong>MAE (Erreur Absolue Moyenne) :</strong> Mesure l\'erreur moyenne en valeur absolue entre les pr√©visions et les valeurs r√©elles. Plus cette valeur est basse, meilleur est le mod√®le.<br><br>'                    
                    '<strong>RMSE (Racine de l\'Erreur Quadratique Moyenne) :</strong> Mesure l\'√©cart type des r√©sidus. Elle p√©nalise davantage les grandes erreurs que la MAE. Plus cette valeur est basse, meilleur est le mod√®le.<br><br>'
                    '<strong>MAPE (Erreur Absolue Moyenne en Pourcentage) :</strong> Exprime l\'erreur en pourcentage par rapport aux valeurs r√©elles. Permet de comparer les performances ind√©pendamment de l\'ordre de grandeur des donn√©es.'                    
                    '</p>'                    
                    '</div>',
                    unsafe_allow_html=True
                )
                
                # Am√©lioration: Option d'exportation des r√©sultats
                with st.expander("Exporter les r√©sultats", expanded=False):
                    st.markdown("### Exporter les pr√©visions et m√©triques")
                    st.info("Utilisez le bouton d'export dans la barre lat√©rale pour t√©l√©charger les pr√©visions.")
                
    
    with tab_scenarios:
        # En-t√™te principal
        st.markdown("### üåê Simulation de Sc√©narios")
        
        # V√©rifier si les pr√©visions sont disponibles
        if not forecasts or best_model == '' or best_model not in forecasts:
            st.warning("Les pr√©visions ne sont pas disponibles pour la simulation. Veuillez g√©n√©rer des pr√©visions d'abord.")
            return
        
        # V√©rifier si le mod√®le de d√©caissement existe
        best_dec_model = best_model.replace('enc', 'dec')
        if best_dec_model not in forecasts:
            st.warning(f"Le mod√®le de d√©caissement correspondant ({best_dec_model}) n'est pas disponible.")
            return
        
        # Cr√©ation des sous-onglets pour les diff√©rents types de sc√©narios
        scenario_tabs = st.tabs(["üìä Simulation Monte Carlo", "üîÆ Sc√©narios Pr√©d√©finis", "‚öôÔ∏è Sc√©nario Personnalis√©"])
        
        # Onglet Simulation Monte Carlo
        with scenario_tabs[0]:
            st.markdown("### üìä Simulation Monte Carlo")
            st.markdown("Cette simulation utilise la m√©thode de Monte Carlo pour √©valuer les risques de tr√©sorerie.")
            
            if forecasting_models and hasattr(forecasting_models, 'monte_carlo_results') and forecasting_models.monte_carlo_results:
                mc_results = forecasting_models.monte_carlo_results
                
                # Cr√©er les graphiques
                fig_enc_mc = visualizer.create_monte_carlo_chart(df_enc, df_dec, mc_results, future_dates)
                st.plotly_chart(fig_enc_mc, use_container_width=True)
                
                # Afficher les statistiques
                st.markdown("#### üìà Indicateurs Cl√©s")
                col1, col2, col3, col4 = st.columns(4)
                
                solde_min = np.min(mc_results['solde_lower_95'])
                solde_max = np.max(mc_results['solde_upper_95'])
                solde_mean = np.mean(mc_results['solde_mean'])
                prob_negative = np.mean(mc_results['prob_negative_solde'])
                
                col1.metric("Solde Minimum", f"{solde_min:,.0f} DH")
                col2.metric("Solde Maximum", f"{solde_max:,.0f} DH")
                col3.metric("Solde Moyen", f"{solde_mean:,.0f} DH")
                col4.metric("Probabilit√© de Solde N√©gatif", f"{prob_negative:.1f}%")
                
                # Recommandations
                st.markdown("#### üí° Recommandations")
                if prob_negative > 20:
                    st.warning("**Risque √©lev√© de tr√©sorerie n√©gative.** Envisagez de r√©duire les d√©penses ou d'augmenter les encaissements.")
                elif solde_min < 0:
                    st.info("**Risque mod√©r√© de tr√©sorerie n√©gative.** Surveillez attentivement les flux de tr√©sorerie.")
                else:
                    st.success("**Situation de tr√©sorerie saine.** Continuez √† surveiller les flux.")
            else:
                st.warning("Pour voir les r√©sultats de la simulation Monte Carlo, veuillez g√©n√©rer les pr√©visions.")
        
        # Onglet Sc√©narios Pr√©d√©finis
        with scenario_tabs[1]:
            st.markdown("### üîÆ Sc√©narios Pr√©d√©finis")
            st.markdown("Ces sc√©narios repr√©sentent diff√©rentes hypoth√®ses d'√©volution de votre tr√©sorerie.")
            
            if scenarios and len(scenarios) > 0:
                # Filtrer les sc√©narios en fonction de l'intervalle de confiance
                confidence_interval = config['confidence_interval']
                filtered_scenarios = {}
                
                # Sc√©narios de base (sans intervalle de confiance sp√©cifique)
                base_scenarios = ['optimiste', 'pessimiste', 'neutre', 'croissance']
                
                # Ajouter les sc√©narios de base
                for name in base_scenarios:
                    if name in scenarios:
                        filtered_scenarios[name] = scenarios[name]
                
                # Ajouter le sc√©nario correspondant √† l'intervalle de confiance
                confidence_scenario = f"{'Optimiste' if confidence_interval >= 80 else 'Pessimiste'}_{confidence_interval}"
                if confidence_scenario in scenarios:
                    filtered_scenarios[confidence_scenario] = scenarios[confidence_scenario]
                
                # Cr√©ation d'onglets pour chaque sc√©nario filtr√©
                predefined_tabs = st.tabs([f"Sc√©nario {name.capitalize()}" for name in filtered_scenarios.keys()])
                
                for i, (scenario_name, scenario_data) in enumerate(filtered_scenarios.items()):
                    with predefined_tabs[i]:
                        # Cr√©ation du graphique pour le sc√©nario
                        fig_scenario = visualizer.create_scenario_chart(df_enc, df_dec, scenario_data, future_dates)
                        st.plotly_chart(fig_scenario, use_container_width=True)
                        
                        # Statistiques du sc√©nario
                        st.markdown("#### üìä Statistiques du Sc√©nario")
                        col1, col2, col3 = st.columns(3)
                        solde = scenario_data['encaissement'] - scenario_data['decaissement']
                        with col1:
                            st.metric(
                                "Encaissements Moyens", 
                                f"{np.mean(scenario_data['encaissement']):,.0f} DH",
                                delta=f"{np.mean(scenario_data['encaissement']) - np.mean(df_enc['y_enc']):,.0f} DH" if len(df_enc) > 0 else None
                            )
                        with col2:
                            st.metric(
                                "D√©caissements Moyens", 
                                f"{np.mean(scenario_data['decaissement']):,.0f} DH",
                                delta=f"{np.mean(scenario_data['decaissement']) - np.mean(df_dec['y_dec']):,.0f} DH" if len(df_dec) > 0 else None
                            )
                        with col3:
                            st.metric(
                                "Solde Moyen", 
                                f"{np.mean(solde):,.0f} DH",
                                delta=f"{np.mean(solde) - (np.mean(df_enc['y_enc']) - np.mean(df_dec['y_dec'])):,.0f} DH" if len(df_enc) > 0 and len(df_dec) > 0 else None
                            )
                        # Description du sc√©nario
                        if scenario_name == "optimiste":
                            st.success("Ce sc√©nario suppose une croissance des encaissements et une stabilisation des d√©caissements.")
                        elif scenario_name == "pessimiste":
                            st.error("Ce sc√©nario suppose une baisse des encaissements et une augmentation des d√©caissements.")
                        elif scenario_name == "neutre":
                            st.info("Ce sc√©nario suppose une √©volution stable des encaissements et des d√©caissements.")
                        elif scenario_name == "croissance":
                            st.success("Ce sc√©nario suppose une croissance progressive des encaissements.")
                        elif scenario_name.startswith("Optimiste_"):
                            st.success(f"Ce sc√©nario optimiste est bas√© sur un intervalle de confiance de {confidence_interval}%.")
                        elif scenario_name.startswith("Pessimiste_"):
                            st.error(f"Ce sc√©nario pessimiste est bas√© sur un intervalle de confiance de {confidence_interval}%.")
                        else:
                            st.info("Aucun sc√©nario pr√©d√©fini n'est disponible. Veuillez g√©n√©rer des pr√©visions d'abord.")
        
        # Onglet Sc√©nario Personnalis√©
        with scenario_tabs[2]:
            st.markdown("### ‚öôÔ∏è Sc√©nario Personnalis√©")
            st.markdown("Cr√©ez votre propre sc√©nario en ajustant les param√®tres ci-dessous.")
            
            # Param√®tres du sc√©nario
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("##### üìà Param√®tres d'Encaissements")
                enc_growth = st.slider("Croissance (%)", -50, 100, 0, 5, key="enc_growth_slider")
                enc_volatility = st.slider("Volatilit√© (%)", 0, 50, 10, 5, key="enc_volatility_slider")
                enc_seasonality = st.selectbox("Saisonnalit√©", ["Aucune", "Mensuelle", "Trimestrielle"], key="enc_seasonality_select")
            
            with col2:
                st.markdown("##### üìâ Param√®tres de D√©caissements")
                dec_growth = st.slider("Croissance (%)", -50, 100, 0, 5, key="dec_growth_slider")
                dec_volatility = st.slider("Volatilit√© (%)", 0, 50, 10, 5, key="dec_volatility_slider")
                dec_seasonality = st.selectbox("Saisonnalit√©", ["Aucune", "Mensuelle", "Trimestrielle"], key="dec_seasonality_select")
            
            # Bouton pour g√©n√©rer le sc√©nario
            if st.button("G√©n√©rer le Sc√©nario", type="primary", key="generate_custom_scenario"):
                try:
                    with st.spinner("G√©n√©ration du sc√©nario personnalis√© en cours..."):
                        params = {
                            'enc_growth': enc_growth,
                            'enc_volatility': enc_volatility,
                            'enc_seasonality': enc_seasonality,
                            'dec_growth': dec_growth,
                            'dec_volatility': dec_volatility,
                            'dec_seasonality': dec_seasonality
                        }
                        
                        if forecasting_models is not None:
                            custom_scenario = forecasting_models.create_custom_scenario(forecasts, n_mois, params)
                    
                    if custom_scenario:
                        # Affichage du sc√©nario
                        fig_custom = visualizer.create_scenario_chart(df_enc, df_dec, custom_scenario, future_dates)
                        st.plotly_chart(fig_custom, use_container_width=True)
            
                        # Statistiques du sc√©nario personnalis√©
                        st.markdown("#### üìä Statistiques du Sc√©nario Personnalis√©")
                        col1, col2, col3 = st.columns(3)
                                    
                        solde = custom_scenario['encaissement'] - custom_scenario['decaissement']
                        
                        with col1:
                            st.metric(
                                "Encaissements Moyens", 
                                            f"{np.mean(custom_scenario['encaissement']):,.0f} DH",
                                            delta=f"{np.mean(custom_scenario['encaissement']) - np.mean(df_enc['y_enc']):,.0f} DH" if len(df_enc) > 0 else None
                            )
                        
                        with col2:
                            st.metric(
                                "D√©caissements Moyens", 
                                            f"{np.mean(custom_scenario['decaissement']):,.0f} DH",
                                            delta=f"{np.mean(custom_scenario['decaissement']) - np.mean(df_dec['y_dec']):,.0f} DH" if len(df_dec) > 0 else None
                            )
                        
                        with col3:
                            st.metric(
                                "Solde Moyen", 
                                            f"{np.mean(solde):,.0f} DH",
                                            delta=f"{np.mean(solde) - (np.mean(df_enc['y_enc']) - np.mean(df_dec['y_dec'])):,.0f} DH" if len(df_enc) > 0 and len(df_dec) > 0 else None
                                        )
                                    
                        # Recommandations bas√©es sur le sc√©nario
                        st.markdown("#### üí° Recommandations")
                        if np.mean(solde) < 0:
                                        st.warning("**Attention :** Ce sc√©nario pr√©voit un solde moyen n√©gatif. Envisagez des mesures pour augmenter vos encaissements ou r√©duire vos d√©caissements.")
                        elif np.mean(solde) > 0 and np.mean(solde) < 0.1 * np.mean(df_dec['y_dec']) and len(df_dec) > 0:
                                        st.info("**Prudence :** Ce sc√©nario pr√©voit un solde positif mais faible. Constituez une r√©serve de tr√©sorerie pour faire face aux impr√©vus.")
                        else:
                            st.success("**Favorable :** Ce sc√©nario pr√©voit un solde positif confortable. Envisagez d'investir l'exc√©dent de tr√©sorerie pour optimiser vos rendements.")
                    else:
                        st.error("Impossible de g√©n√©rer le sc√©nario personnalis√©. Veuillez r√©ex√©cuter l'analyse.")
                except Exception as e:
                    st.error(f"Erreur lors de la g√©n√©ration du sc√©nario : {e}")

    with tab_metrics:
        # Calcul des m√©triques financi√®res
        metrics = calculate_financial_metrics(df_enc, df_dec)
        
        # Cr√©ation des sous-onglets pour une meilleure organisation
        metrics_tab1, metrics_tab2, metrics_tab3 = st.tabs(["üìä Indicateurs Cl√©s", "üìà Analyse de Tendance", "üí° Recommandations"])
        
        with metrics_tab1:
            # Premi√®re rang√©e de m√©triques avec style am√©lior√©
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(
                    f'<div style="background-color: {"#ecfdf5" if metrics["Ratio de Couverture"] >= 1 else "#fee2e2"}; padding: 1.5rem; border-radius: 10px; text-align: center;">'            
                    f'<h4 style="margin: 0; color: {"#065f46" if metrics["Ratio de Couverture"] >= 1 else "#991b1b"};">üõ°Ô∏è Ratio de Couverture</h4>'            
                    f'<p style="font-size: 1.5rem; margin: 0.5rem 0; color: {"#065f46" if metrics["Ratio de Couverture"] >= 1 else "#991b1b"};">{metrics["Ratio de Couverture"]:.2f}x</p>'            
                    f'<p style="margin: 0; color: {"#065f46" if metrics["Ratio de Couverture"] >= 1 else "#991b1b"};">{"‚úÖ Bon" if metrics["Ratio de Couverture"] >= 1 else "‚ö†Ô∏è √Ä am√©liorer"}</p>'            
                    f'</div>',
                    unsafe_allow_html=True
                )

            with col2:
                st.markdown(
                            f'<div style="background-color: {"#ecfdf5" if metrics["Taux de Croissance Encaissements"] > metrics["Taux de Croissance D√©caissements"] else "#fee2e2"}; padding: 1.5rem; border-radius: 10px; text-align: center;">'            
                            f'<h4 style="margin: 0; color: {"#065f46" if metrics["Taux de Croissance Encaissements"] > metrics["Taux de Croissance D√©caissements"] else "#991b1b"};">üìà Croissance Encaissements</h4>'            
                            f'<p style="font-size: 1.5rem; margin: 0.5rem 0; color: {"#065f46" if metrics["Taux de Croissance Encaissements"] > metrics["Taux de Croissance D√©caissements"] else "#991b1b"};">{metrics["Taux de Croissance Encaissements"]:.1f}%</p>'            
                            f'<p style="margin: 0; color: {"#065f46" if metrics["Taux de Croissance Encaissements"] > metrics["Taux de Croissance D√©caissements"] else "#991b1b"};">{"‚úÖ Bon" if metrics["Taux de Croissance Encaissements"] > metrics["Taux de Croissance D√©caissements"] else "‚ö†Ô∏è √Ä am√©liorer"}</p>'            
                            f'</div>',
                    unsafe_allow_html=True
                )
        
            with col3:
                st.markdown(
                            f'<div style="background-color: {"#ecfdf5" if metrics["Indice de Stabilit√©"] >= 0.5 else "#fee2e2"}; padding: 1.5rem; border-radius: 10px; text-align: center;">'            
                            f'<h4 style="margin: 0; color: {"#065f46" if metrics["Indice de Stabilit√©"] >= 0.5 else "#991b1b"};">‚öñÔ∏è Indice de Stabilit√©</h4>'            
                            f'<p style="font-size: 1.5rem; margin: 0.5rem 0; color: {"#065f46" if metrics["Indice de Stabilit√©"] >= 0.5 else "#991b1b"};">{metrics["Indice de Stabilit√©"]:.2f}</p>'            
                            f'<p style="margin: 0; color: {"#065f46" if metrics["Indice de Stabilit√©"] >= 0.5 else "#991b1b"};">{"‚úÖ Bon" if metrics["Indice de Stabilit√©"] >= 0.5 else "‚ö†Ô∏è √Ä am√©liorer"}</p>'            
                            f'</div>',
                    unsafe_allow_html=True
                )

            # Ajout d'une div explicative sur les indicateurs cl√©s
            st.markdown(
                '''
                <div style="background-color: #f8fafc; border-radius: 10px; padding: 1.5rem; margin-top: 1.5rem; margin-bottom: 1.5rem; border-left: 4px solid #3b82f6;">
                <h4 style="color: #1e40af; margin-top: 0;">‚ÑπÔ∏è D√©tail des Indicateurs Cl√©s</h4>
                <ul style="font-size: 1.05rem; color: #334155;">
                  <li><b>Ratio de Couverture :</b> Mesure la capacit√© de l'entreprise √† couvrir ses d√©caissements par ses encaissements. Un ratio ‚â• 1 indique une bonne couverture.</li>
                  <li><b>Croissance Encaissements :</b> Taux d'√©volution des encaissements sur la p√©riode analys√©e. Un taux positif est g√©n√©ralement favorable.</li>
                  <li><b>Croissance D√©caissements :</b> Taux d'√©volution des d√©caissements. Un taux trop √©lev√© peut signaler une d√©rive des charges.</li>
                  <li><b>Indice de Stabilit√© :</b> √âvalue la r√©gularit√© des flux de tr√©sorerie. Plus il est proche de 1, plus les flux sont stables.</li>
                  <li><b>Volatilit√© Encaissements :</b> Mesure la variabilit√© des encaissements. Une volatilit√© faible est pr√©f√©rable pour la pr√©visibilit√©.</li>
                  <li><b>Volatilit√© D√©caissements :</b> Mesure la variabilit√© des d√©caissements. Une forte volatilit√© peut indiquer des charges impr√©vues.</li>
                  <li><b>Marge de S√©curit√© :</b> Pourcentage de s√©curit√© financi√®re disponible apr√®s couverture des charges. Plus elle est √©lev√©e, plus l'entreprise est r√©siliente.</li>
                </ul>
                </div>
                ''',
                unsafe_allow_html=True
            )
        
            # Deuxi√®me rang√©e de m√©triques avec style am√©lior√©
            col4, col5, col6 = st.columns(3)
            
            with col4:
                st.markdown(
                        f'<div style="background-color: {"#ecfdf5" if metrics["Volatilit√© Encaissements (%)"] <= 30 else "#fee2e2"}; padding: 1.5rem; border-radius: 10px; text-align: center;">'            
                        f'<h4 style="margin: 0; color: {"#065f46" if metrics["Volatilit√© Encaissements (%)"] <= 30 else "#991b1b"};">üìä Volatilit√© Encaissements</h4>'            
                        f'<p style="font-size: 1.5rem; margin: 0.5rem 0; color: {"#065f46" if metrics["Volatilit√© Encaissements (%)"] <= 30 else "#991b1b"};">{metrics["Volatilit√© Encaissements (%)"]:.1f}%</p>'            
                        f'<p style="margin: 0; color: {"#065f46" if metrics["Volatilit√© Encaissements (%)"] <= 30 else "#991b1b"};">{"‚úÖ Bon" if metrics["Volatilit√© Encaissements (%)"] <= 30 else "‚ö†Ô∏è √âlev√©e"}</p>'            
                    f'</div>',
                    unsafe_allow_html=True
                )
        
            with col5:
                st.markdown(
                        f'<div style="background-color: {"#ecfdf5" if metrics["Volatilit√© D√©caissements (%)"] <= 30 else "#fee2e2"}; padding: 1.5rem; border-radius: 10px; text-align: center;">'            
                        f'<h4 style="margin: 0; color: {"#065f46" if metrics["Volatilit√© D√©caissements (%)"] <= 30 else "#991b1b"};">üìâ Volatilit√© D√©caissements</h4>'            
                        f'<p style="font-size: 1.5rem; margin: 0.5rem 0; color: {"#065f46" if metrics["Volatilit√© D√©caissements (%)"] <= 30 else "#991b1b"};">{metrics["Volatilit√© D√©caissements (%)"]:.1f}%</p>'            
                        f'<p style="margin: 0; color: {"#065f46" if metrics["Volatilit√© D√©caissements (%)"] <= 30 else "#991b1b"};">{"‚úÖ Bon" if metrics["Volatilit√© D√©caissements (%)"] <= 30 else "‚ö†Ô∏è √âlev√©e"}</p>'            
                    f'</div>',
                    unsafe_allow_html=True
                )
            
            with col6:
                st.markdown(
                        f'<div style="background-color: {"#ecfdf5" if metrics["Marge de S√©curit√© (%)"] > 0 else "#fee2e2"}; padding: 1.5rem; border-radius: 10px; text-align: center;">'            
                        f'<h4 style="margin: 0; color: {"#065f46" if metrics["Marge de S√©curit√© (%)"] > 0 else "#991b1b"};">üõ°Ô∏è Marge de S√©curit√©</h4>'            
                        f'<p style="font-size: 1.5rem; margin: 0.5rem 0; color: {"#065f46" if metrics["Marge de S√©curit√© (%)"] > 0 else "#991b1b"};">{metrics["Marge de S√©curit√© (%)"]:.1f}%</p>'            
                        f'<p style="margin: 0; color: {"#065f46" if metrics["Marge de S√©curit√© (%)"] > 0 else "#991b1b"};">{"‚úÖ Bon" if metrics["Marge de S√©curit√© (%)"] > 0 else "‚ö†Ô∏è Insuffisante"}</p>'            
                    f'</div>',
                    unsafe_allow_html=True
                )
    
        with metrics_tab2:
            # Cr√©ation du graphique radar des indicateurs financiers
            fig_radar = visualizer.create_financial_indicators_chart(metrics)
            st.plotly_chart(fig_radar, use_container_width=True)
            
            # Cr√©ation d'un DataFrame pour l'analyse des tendances
            trend_data = {
                'Indicateur': [
                    'Ratio de Couverture',
                    'Taux de Croissance Encaissements',
                    'Taux de Croissance D√©caissements',
                    'Indice de Stabilit√©',
                    'Volatilit√© Encaissements',
                    'Volatilit√© D√©caissements',
                    'Marge de S√©curit√©'
                ],
                'Valeur': [
                    f"{metrics['Ratio de Couverture']:.2f}x",
                    f"{metrics['Taux de Croissance Encaissements']:.1f}%",
                    f"{metrics['Taux de Croissance D√©caissements']:.1f}%",
                    f"{metrics['Indice de Stabilit√©']:.2f}",
                    f"{metrics['Volatilit√© Encaissements (%)']:.1f}%",
                    f"{metrics['Volatilit√© D√©caissements (%)']:.1f}%",
                    f"{metrics['Marge de S√©curit√© (%)']:.1f}%"
                ],
                'Statut': [
                    '‚úÖ' if metrics['Ratio de Couverture'] >= 1 else '‚ö†Ô∏è',
                    '‚úÖ' if metrics['Taux de Croissance Encaissements'] > metrics['Taux de Croissance D√©caissements'] else '‚ö†Ô∏è',
                    '‚úÖ' if metrics['Taux de Croissance D√©caissements'] < metrics['Taux de Croissance Encaissements'] else '‚ö†Ô∏è',
                    '‚úÖ' if metrics['Indice de Stabilit√©'] >= 0.5 else '‚ö†Ô∏è',
                    '‚úÖ' if metrics['Volatilit√© Encaissements (%)'] <= 30 else '‚ö†Ô∏è',
                    '‚úÖ' if metrics['Volatilit√© D√©caissements (%)'] <= 30 else '‚ö†Ô∏è',
                    '‚úÖ' if metrics['Marge de S√©curit√© (%)'] > 0 else '‚ö†Ô∏è'
                ],
                'Interpr√©tation': [
                    'Suffisant' if metrics['Ratio de Couverture'] >= 1 else 'Insuffisant',
                    'Positif' if metrics['Taux de Croissance Encaissements'] > metrics['Taux de Croissance D√©caissements'] else '√Ä am√©liorer',
                    'Contr√¥l√©' if metrics['Taux de Croissance D√©caissements'] < metrics['Taux de Croissance Encaissements'] else '√âlev√©',
                    'Stable' if metrics['Indice de Stabilit√©'] >= 0.5 else 'Instable',
                    'Contr√¥l√©e' if metrics['Volatilit√© Encaissements (%)'] <= 30 else '√âlev√©e',
                    'Contr√¥l√©e' if metrics['Volatilit√© D√©caissements (%)'] <= 30 else '√âlev√©e',
                    'Suffisante' if metrics['Marge de S√©curit√© (%)'] > 0 else 'Insuffisante'
                ]
            }
            
            trend_df = pd.DataFrame(trend_data)
            st.dataframe(
                trend_df,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "Indicateur": st.column_config.TextColumn("Indicateur", width="large"),
                    "Valeur": st.column_config.TextColumn("Valeur", width="medium"),
                    "Statut": st.column_config.TextColumn("Statut", width="small"),
                    "Interpr√©tation": st.column_config.TextColumn("Interpr√©tation", width="medium")
                }
            )
            
            # Calcul du nombre d'indicateurs positifs
            positive_indicators = sum(1 for status in trend_data['Statut'] if status == '‚úÖ')
            total_indicators = len(trend_data['Statut'])
            health_score = (positive_indicators / total_indicators) * 100
            
            # Affichage de la synth√®se avec style
            st.markdown(
                f'<div style="background-color: {"#ecfdf5" if health_score >= 70 else "#fff7ed" if health_score >= 40 else "#fee2e2"}; padding: 1.5rem; border-radius: 10px;">'            
                f'<p style="margin: 0; color: {"#065f46" if health_score >= 70 else "#92400e" if health_score >= 40 else "#991b1b"};"><strong>Score de Sant√© Financi√®re :</strong> {health_score:.1f}%</p>'            
                f'<p style="margin: 0.5rem 0 0 0; color: {"#065f46" if health_score >= 70 else "#92400e" if health_score >= 40 else "#991b1b"};">'            
                f'{"‚úÖ Situation financi√®re saine" if health_score >= 70 else "‚ö†Ô∏è Situation financi√®re √† surveiller" if health_score >= 40 else "‚ùå Situation financi√®re pr√©occupante"}'            
                f'</p>'            
                f'</div>',
                unsafe_allow_html=True
            )
        
        with metrics_tab3:
            # G√©n√©ration des recommandations
            recommendations = visualizer.generate_financial_recommendations(metrics)
            
            # Cat√©gorisation des recommandations
            priority_recommendations = []
            improvement_recommendations = []
            maintenance_recommendations = []
            
            for rec in recommendations:
                if "‚ö†Ô∏è" in rec or "‚ùå" in rec:
                    priority_recommendations.append(rec)
                elif "‚úÖ" in rec:
                    maintenance_recommendations.append(rec)
                else:
                    improvement_recommendations.append(rec)
            
            # Affichage des recommandations prioritaires
            if priority_recommendations:
                for i, rec in enumerate(priority_recommendations, 1):
                    st.markdown(
                                f'<div style="background-color: #fee2e2; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid #991b1b;">'            
                                f'<p style="margin: 0; color: #991b1b;"><strong>Priorit√© {i}:</strong> {rec}</p>'            
                        f'</div>',
                        unsafe_allow_html=True
                    )
        
            # Affichage des recommandations d'am√©lioration
            if improvement_recommendations:
                for i, rec in enumerate(improvement_recommendations, 1):
                    st.markdown(
                                f'<div style="background-color: #fff7ed; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid #92400e;">'            
                                f'<p style="margin: 0; color: #92400e;"><strong>Am√©lioration {i}:</strong> {rec}</p>'            
                        f'</div>',
                        unsafe_allow_html=True
                    )
            
            # Affichage des recommandations de maintenance
            if maintenance_recommendations:
                for i, rec in enumerate(maintenance_recommendations, 1):
                    st.markdown(
                                f'<div style="background-color: #ecfdf5; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid #065f46;">'            
                                f'<p style="margin: 0; color: #065f46;"><strong>Maintenance {i}:</strong> {rec}</p>'            
                                f'</div>',
                        unsafe_allow_html=True
                    )
            
            # Cr√©ation d'un plan d'action bas√© sur les recommandations
            action_plan = []
            
            if priority_recommendations:
                action_plan.append({
                    "Priorit√©": "Haute",
                    "Actions": [rec.replace("‚ö†Ô∏è", "").replace("‚ùå", "").strip() for rec in priority_recommendations[:2]],
                    "Timing": "Imm√©diat"
                })
            
            if improvement_recommendations:
                action_plan.append({
                    "Priorit√©": "Moyenne",
                    "Actions": [rec.strip() for rec in improvement_recommendations[:2]],
                    "Timing": "Court terme"
                })
            
            if maintenance_recommendations:
                action_plan.append({
                    "Priorit√©": "Basse",
                    "Actions": [rec.replace("‚úÖ", "").strip() for rec in maintenance_recommendations[:2]],
                    "Timing": "Continu"
                })
            
            # Affichage du plan d'action
            if action_plan:
                action_df = pd.DataFrame(action_plan)
                st.dataframe(
                    action_df,
                    use_container_width=True,
                    hide_index=True,
                    column_config={
                        "Priorit√©": st.column_config.TextColumn("Priorit√©", width="small"),
                        "Actions": st.column_config.ListColumn("Actions", width="large"),
                        "Timing": st.column_config.TextColumn("Timing", width="medium")
                    }
                )

def export_forecasts(df_enc, df_dec, forecasts, n_mois, export_format='Excel'):
    """Exporte les pr√©visions dans le format sp√©cifi√©"""
    try:
        if export_format == 'PDF':
            st.write("G√©n√©ration du rapport PDF professionnel...")
            output = BytesIO()
            
            # Configuration du document PDF avec des marges plus grandes pour un look plus professionnel
            doc = SimpleDocTemplate(
                output,
                pagesize=letter,
                rightMargin=50,
                leftMargin=50,
                topMargin=50,
                bottomMargin=50
            )
            
            # Styles personnalis√©s am√©lior√©s
            styles = getSampleStyleSheet()
            styles.add(ParagraphStyle(
                name='CoverTitle',
                parent=styles['Heading1'],
                fontSize=40,
                spaceAfter=30,
                textColor=colors.HexColor('#1e40af'),
                alignment=1,
                fontName='Helvetica-Bold'
            ))
            styles.add(ParagraphStyle(
                name='CoverSubtitle',
                parent=styles['Heading2'],
                fontSize=24,
                spaceAfter=30,
                textColor=colors.HexColor('#3b82f6'),
                alignment=1,
                fontName='Helvetica'
            ))
            styles.add(ParagraphStyle(
                name='SectionTitle',
                parent=styles['Heading1'],
                fontSize=28,
                spaceAfter=20,
                textColor=colors.HexColor('#1e40af'),
                fontName='Helvetica-Bold'
            ))
            styles.add(ParagraphStyle(
                name='SubSectionTitle',
                parent=styles['Heading2'],
                fontSize=20,
                spaceAfter=15,
                textColor=colors.HexColor('#3b82f6'),
                fontName='Helvetica-Bold'
            ))
            styles.add(ParagraphStyle(
                name='Highlight',
                parent=styles['Normal'],
                fontSize=12,
                textColor=colors.HexColor('#1e40af'),
                fontName='Helvetica-Bold'
            ))
            styles.add(ParagraphStyle(
                name='Quote',
                parent=styles['Normal'],
                fontSize=12,
                textColor=colors.HexColor('#4b5563'),
                fontName='Helvetica-Oblique',
                leftIndent=20,
                rightIndent=20
            ))
            
            # Liste des √©l√©ments du document
            elements = []
            
            # Page de couverture am√©lior√©e
            elements.append(Paragraph(
                '<para alignment="center"><font color="#1e40af" size="72">üí∞</font></para>',
                styles['Normal']
            ))
            elements.append(Spacer(1, 40))
            elements.append(Paragraph("Rapport de Pr√©visions de Tr√©sorerie", styles['CoverTitle']))
            elements.append(Paragraph("Analyse D√©taill√©e et Recommandations Strat√©giques", styles['CoverSubtitle']))
            elements.append(Spacer(1, 60))
            
            # Informations de couverture dans un style moderne
            cover_info = f"""
            <para alignment="center">
            <font color="#4b5563" size="12">
            Date de g√©n√©ration : {datetime.now().strftime('%d/%m/%Y')}<br/>
            Horizon de pr√©vision : {n_mois} mois<br/>
            Version : 2.0
            </font>
            </para>
            """
            elements.append(Paragraph(cover_info, styles['Normal']))
            elements.append(PageBreak())
            
            # Sommaire am√©lior√© avec num√©rotation
            elements.append(Paragraph("Sommaire", styles['SectionTitle']))
            elements.append(Spacer(1, 20))
            
            toc = [
                "1. R√©sum√© Ex√©cutif",
                "2. Analyse des Donn√©es Historiques",
                "3. Pr√©visions D√©taill√©es",
                "4. Analyse des Tendances",
                "5. Indicateurs Cl√©s de Performance",
                "6. Analyse des Risques",
                "7. Recommandations Strat√©giques",
                "8. Annexes Techniques"
            ]
            
            for item in toc:
                elements.append(Paragraph(item, styles['Normal']))
            elements.append(PageBreak())
            
            # R√©sum√© Ex√©cutif am√©lior√©
            elements.append(Paragraph("1. R√©sum√© Ex√©cutif", styles['SectionTitle']))
            elements.append(Spacer(1, 10))
            
            # Calcul des statistiques cl√©s
            enc_mean = np.mean(forecasts.get('prophet_enc', []))
            dec_mean = np.mean(forecasts.get('prophet_dec', []))
            solde_mean = enc_mean - dec_mean
            enc_trend = (forecasts.get('prophet_enc', [])[-1] / forecasts.get('prophet_enc', [])[0] - 1) * 100
            dec_trend = (forecasts.get('prophet_dec', [])[-1] / forecasts.get('prophet_dec', [])[0] - 1) * 100

            # Citation d'introduction
            elements.append(Paragraph(
                '"Une bonne gestion de tr√©sorerie est la cl√© de la p√©rennit√© de l\'entreprise."',
                styles['Quote']
            ))
            elements.append(Spacer(1, 20))
            
            summary_text = f"""
Ce rapport pr√©sente une analyse approfondie des pr√©visions de tr√©sorerie sur {n_mois} mois, bas√©e sur des mod√®les avanc√©s de pr√©diction et une analyse d√©taill√©e des tendances historiques.<br/><br/>
<font color="#1e40af"><b>Points cl√©s :</b></font><br/>
‚Ä¢ Encaissements moyens pr√©vus : <b>{enc_mean:,.0f} DH</b><br/>
‚Ä¢ D√©caissements moyens pr√©vus : <b>{dec_mean:,.0f} DH</b><br/>
‚Ä¢ Solde moyen pr√©vu : <b>{solde_mean:,.0f} DH</b><br/>
‚Ä¢ Tendance des encaissements : <b>{enc_trend:+.1f}%</b><br/>
‚Ä¢ Tendance des d√©caissements : <b>{dec_trend:+.1f}%</b>
"""
            elements.append(Paragraph(summary_text, styles['Normal']))
            elements.append(Spacer(1, 20))
            
            # Analyse des Donn√©es Historiques avec graphiques
            elements.append(Paragraph("2. Analyse des Donn√©es Historiques", styles['SectionTitle']))
            elements.append(Spacer(1, 10))
            
            # Tableau des donn√©es historiques r√©centes avec style am√©lior√©
            hist_data = [['Date', 'Encaissements', 'D√©caissements', 'Solde', 'Variation']]
            for i in range(min(6, len(df_enc))):
                date = df_enc['ds'].iloc[-(i+1)]
                enc = df_enc['y_enc'].iloc[-(i+1)]
                dec = df_dec['y_dec'].iloc[-(i+1)]
                solde = enc - dec
                variation = (solde / (df_enc['y_enc'].iloc[-(i+2)] - df_dec['y_dec'].iloc[-(i+2)]) - 1) * 100 if i < len(df_enc)-1 else 0
                hist_data.append([
                    date.strftime('%d/%m/%Y'),
                    f"{enc:,.0f} DH",
                    f"{dec:,.0f} DH",
                    f"{solde:,.0f} DH",
                    f"{variation:+.1f}%"
                ])
            
            hist_table = Table(hist_data)
            hist_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e40af')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8fafc')]),
            ]))
            elements.append(hist_table)
            elements.append(Spacer(1, 20))
            
            # Pr√©visions D√©taill√©es avec analyse
            elements.append(Paragraph("3. Pr√©visions D√©taill√©es", styles['SectionTitle']))
            elements.append(Spacer(1, 10))
            
            # Tableau des pr√©visions avec style am√©lior√©
            forecast_data = [['Date', 'Encaissements', 'D√©caissements', 'Solde', 'Variation']]
            for i in range(len(forecasts.get('prophet_enc', []))):
                date = pd.date_range(start=df_enc['ds'].max(), periods=n_mois + 1, freq='M')[i+1]
                enc = forecasts.get('prophet_enc', [])[i]
                dec = forecasts.get('prophet_dec', [])[i]
                solde = enc - dec
                variation = (solde / (forecasts.get('prophet_enc', [])[i-1] - forecasts.get('prophet_dec', [])[i-1]) - 1) * 100 if i > 0 else 0
                forecast_data.append([
                    date.strftime('%d/%m/%Y'),
                    f"{enc:,.0f} DH",
                    f"{dec:,.0f} DH",
                    f"{solde:,.0f} DH",
                    f"{variation:+.1f}%"
                ])
            
            forecast_table = Table(forecast_data)
            forecast_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e40af')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8fafc')]),
            ]))
            elements.append(forecast_table)
            elements.append(PageBreak())
            
            # Analyse des Tendances avec visualisations
            elements.append(Paragraph("4. Analyse des Tendances", styles['SectionTitle']))
            elements.append(Spacer(1, 10))
            
            trend_analysis = f"""
            <para>
            <font color="#1e40af"><b>Analyse des tendances sur la p√©riode de pr√©vision :</b></font>
            
            <b>Encaissements :</b>
            ‚Ä¢ Valeur moyenne : {enc_mean:,.0f} DH
            ‚Ä¢ Tendance : {enc_trend:+.1f}%
            ‚Ä¢ Volatilit√© : {np.std(forecasts.get('prophet_enc', [])):,.0f} DH
            ‚Ä¢ Coefficient de variation : {(np.std(forecasts.get('prophet_enc', [])) / enc_mean * 100):.1f}%
            
            <b>D√©caissements :</b>
            ‚Ä¢ Valeur moyenne : {dec_mean:,.0f} DH
            ‚Ä¢ Tendance : {dec_trend:+.1f}%
            ‚Ä¢ Volatilit√© : {np.std(forecasts.get('prophet_dec', [])):,.0f} DH
            ‚Ä¢ Coefficient de variation : {(np.std(forecasts.get('prophet_dec', [])) / dec_mean * 100):.1f}%
            
            <b>Solde :</b>
            ‚Ä¢ Valeur moyenne : {solde_mean:,.0f} DH
            ‚Ä¢ Tendance : {(solde_mean / (df_enc['y_enc'].iloc[-1] - df_dec['y_dec'].iloc[-1]) - 1) * 100:+.1f}%
            ‚Ä¢ Volatilit√© : {np.std([e - d for e, d in zip(forecasts.get('prophet_enc', []), forecasts.get('prophet_dec', []))]):,.0f} DH
            </para>
            """
            elements.append(Paragraph(trend_analysis, styles['Normal']))
            elements.append(Spacer(1, 20))
            
            # Nouvelle section : Indicateurs Cl√©s de Performance
            elements.append(Paragraph("5. Indicateurs Cl√©s de Performance", styles['SectionTitle']))
            elements.append(Spacer(1, 10))
            
            kpi_data = [
                ['Indicateur', 'Valeur', 'Tendance', 'Statut'],
                ['Ratio de Tr√©sorerie', f"{(enc_mean / dec_mean):.2f}", f"{(enc_trend - dec_trend):+.1f}%", 'üü¢' if enc_mean > dec_mean else 'üî¥'],
                ['Marge de S√©curit√©', f"{(solde_mean / enc_mean * 100):.1f}%", f"{(solde_mean / enc_mean * 100 - (df_enc['y_enc'].iloc[-1] - df_dec['y_dec'].iloc[-1]) / df_enc['y_enc'].iloc[-1] * 100):+.1f}%", 'üü¢' if solde_mean > 0 else 'üî¥'],
                ['Volatilit√© Relative', f"{(np.std(forecasts.get('prophet_enc', [])) / enc_mean * 100):.1f}%", 'Stable', 'üü°'],
                ['Efficacit√© Op√©rationnelle', f"{(1 - dec_mean / enc_mean) * 100:.1f}%", f"{(enc_trend - dec_trend):+.1f}%", 'üü¢' if enc_trend > dec_trend else 'üî¥']
            ]
            
            kpi_table = Table(kpi_data)
            kpi_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e40af')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8fafc')]),
            ]))
            elements.append(kpi_table)
            elements.append(PageBreak())
            
            # Nouvelle section : Analyse des Risques
            elements.append(Paragraph("6. Analyse des Risques", styles['SectionTitle']))
            elements.append(Spacer(1, 10))
            
            risk_analysis = f"""
            <para>
            <font color="#1e40af"><b>√âvaluation des risques principaux :</b></font>
            
            <b>Risque de Tr√©sorerie :</b>
            ‚Ä¢ Niveau : {'√âlev√©' if solde_mean < 0 else 'Mod√©r√©' if solde_mean < enc_mean * 0.2 else 'Faible'}
            ‚Ä¢ Impact : {'Critique' if solde_mean < 0 else 'Significatif' if solde_mean < enc_mean * 0.2 else 'Limit√©'}
            ‚Ä¢ Probabilit√© : {'√âlev√©e' if np.std(forecasts.get('prophet_enc', [])) > enc_mean * 0.2 else 'Mod√©r√©e' if np.std(forecasts.get('prophet_enc', [])) > enc_mean * 0.1 else 'Faible'}
            
            <b>Risque Op√©rationnel :</b>
            ‚Ä¢ Niveau : {'√âlev√©' if dec_trend > enc_trend else 'Mod√©r√©' if abs(dec_trend - enc_trend) < 5 else 'Faible'}
            ‚Ä¢ Impact : {'Significatif' if dec_mean > enc_mean else 'Mod√©r√©' if dec_mean > enc_mean * 0.8 else 'Limit√©'}
            ‚Ä¢ Probabilit√© : {'√âlev√©e' if np.std(forecasts.get('prophet_dec', [])) > dec_mean * 0.2 else 'Mod√©r√©e' if np.std(forecasts.get('prophet_dec', [])) > dec_mean * 0.1 else 'Faible'}
            </para>
            """
            elements.append(Paragraph(risk_analysis, styles['Normal']))
            elements.append(Spacer(1, 20))
            
            # Recommandations Strat√©giques am√©lior√©es
            elements.append(Paragraph("7. Recommandations Strat√©giques", styles['SectionTitle']))
            elements.append(Spacer(1, 10))
            
            recommendations = f"""
            <font color="#1e40af"><b>Recommandations bas√©es sur l'analyse approfondie :</b></font><br/><br/>
            <b>1. Gestion des Encaissements :</b><br/>
            ‚Ä¢ {'Renforcer le suivi des cr√©ances clients et mettre en place un syst√®me de relance automatis√©' if enc_trend < 0 else 'Maintenir la politique actuelle de recouvrement et optimiser les processus de facturation'}<br/>
            ‚Ä¢ {'Diversifier les sources de revenus et d√©velopper de nouveaux march√©s' if np.std(forecasts.get('prophet_enc', [])) > enc_mean * 0.2 else 'Optimiser les processus de facturation et renforcer la fid√©lisation client'}<br/><br/>
            <b>2. Gestion des D√©caissements :</b><br/>
            ‚Ä¢ {'R√©duire les d√©penses non essentielles et optimiser les co√ªts op√©rationnels' if dec_trend > 0 else "Maintenir le contr√¥le des co√ªts et identifier des opportunit√©s d'optimisation"}<br/>
            ‚Ä¢ {'N√©gocier de meilleurs d√©lais de paiement avec les fournisseurs' if dec_mean > enc_mean else 'Optimiser la gestion des stocks et des approvisionnements'}<br/><br/>
            <b>3. Gestion de la Tr√©sorerie :</b><br/>
            ‚Ä¢ {'Mettre en place un fonds de roulement et √©tablir des lignes de cr√©dit pr√©ventives' if solde_mean < 0 else "Optimiser l'investissement des exc√©dents et d√©velopper une strat√©gie de placement"}<br/>
            ‚Ä¢ {'√âtablir un plan de tr√©sorerie d√©taill√© et des indicateurs de suivi' if min([e - d for e, d in zip(forecasts.get('prophet_enc', []), forecasts.get('prophet_dec', []))]) < 0 else "D√©velopper des investissements √† court terme et optimiser la gestion des liquidit√©s"}
            """
            elements.append(Paragraph(recommendations, styles['Normal']))
            elements.append(PageBreak())
            
            # Annexes Techniques am√©lior√©es
            elements.append(Paragraph("8. Annexes Techniques", styles['SectionTitle']))
            elements.append(Spacer(1, 10))
            
            # Statistiques d√©taill√©es avec style am√©lior√©
            elements.append(Paragraph("Statistiques D√©taill√©es", styles['SubSectionTitle']))
            stats_data = [
                ['M√©trique', 'Valeur', 'Tendance'],
                ['Encaissements Moyens', f"{enc_mean:,.0f} DH", f"{enc_trend:+.1f}%"],
                ['D√©caissements Moyens', f"{dec_mean:,.0f} DH", f"{dec_trend:+.1f}%"],
                ['Solde Moyen', f"{solde_mean:,.0f} DH", f"{(solde_mean / (df_enc['y_enc'].iloc[-1] - df_dec['y_dec'].iloc[-1]) - 1) * 100:+.1f}%"],
                ['Volatilit√© Encaissements', f"{np.std(forecasts.get('prophet_enc', [])):,.0f} DH", 'N/A'],
                ['Volatilit√© D√©caissements', f"{np.std(forecasts.get('prophet_dec', [])):,.0f} DH", 'N/A'],
                ['Ratio de Tr√©sorerie', f"{(enc_mean / dec_mean):.2f}", f"{(enc_trend - dec_trend):+.1f}%"],
                ['Marge de S√©curit√©', f"{(solde_mean / enc_mean * 100):.1f}%", f"{(solde_mean / enc_mean * 100 - (df_enc['y_enc'].iloc[-1] - df_dec['y_dec'].iloc[-1]) / df_enc['y_enc'].iloc[-1] * 100):+.1f}%"],
                ['Horizon de Pr√©vision', f"{n_mois} mois", 'N/A']
            ]
            
            stats_table = Table(stats_data)
            stats_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e40af')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
                ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8fafc')]),
            ]))
            elements.append(stats_table)
            
            # Pied de page am√©lior√©
            elements.append(Spacer(1, 30))
            footer_text = f"Ce rapport a √©t√© g√©n√©r√© automatiquement par l'application de Pr√©visions de Tr√©sorerie.<br/>Date de g√©n√©ration : {datetime.now().strftime('%d/%m/%Y %H:%M')}<br/>Version : 2.0 | ¬© 2024 Tous droits r√©serv√©s"
            elements.append(Paragraph(footer_text, styles['Normal']))
            
            # G√©n√©ration du PDF
            doc.build(elements)
            output.seek(0)
            return output, 'application/pdf', 'rapport_previsions_tresorerie.pdf'
            
        elif export_format == 'Excel':
            # Cr√©er un fichier Excel avec plusieurs onglets
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                # Onglet des pr√©visions
                df_forecast = pd.DataFrame({
                    'Date': pd.date_range(start=df_enc['ds'].max(), periods=n_mois + 1, freq='M')[1:],
                    'Encaissements': forecasts.get('prophet_enc', []),
                    'D√©caissements': forecasts.get('prophet_dec', []),
                    'Solde': [e - d for e, d in zip(forecasts.get('prophet_enc', []), forecasts.get('prophet_dec', []))]
                })
                df_forecast.to_excel(writer, sheet_name='Pr√©visions', index=False)
                
                # Onglet des donn√©es historiques
                df_historical = pd.DataFrame({
                    'Date': df_enc['ds'],
                    'Encaissements': df_enc['y_enc'],
                    'D√©caissements': df_dec['y_dec'],
                    'Solde': df_enc['y_enc'] - df_dec['y_dec']
                })
                df_historical.to_excel(writer, sheet_name='Donn√©es Historiques', index=False)
            
            output.seek(0)
            return output, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'previsions_tresorerie.xlsx'
            
        elif export_format == 'CSV':
            # Cr√©er un fichier CSV avec toutes les donn√©es
            future_dates = pd.date_range(start=df_enc['ds'].max(), periods=n_mois + 1, freq='M')[1:]
            enc_forecast = forecasts.get('prophet_enc', [])
            dec_forecast = forecasts.get('prophet_dec', [])
            
            # Debug des longueurs
            st.write(f"Longueur des dates futures : {len(future_dates)}")
            st.write(f"Longueur des encaissements : {len(enc_forecast)}")
            st.write(f"Longueur des d√©caissements : {len(dec_forecast)}")
            st.write(f"Nombre de mois demand√© : {n_mois}")
            
            # V√©rifier que toutes les donn√©es ont la m√™me longueur
            if len(future_dates) != len(enc_forecast) or len(future_dates) != len(dec_forecast):
                st.error("Erreur : Les donn√©es de pr√©vision n'ont pas la m√™me longueur")
                return None, None, None
            
            # Cr√©er le DataFrame des pr√©visions
            df_forecast = pd.DataFrame({
                'Date': future_dates,
                'Encaissements': enc_forecast,
                'D√©caissements': dec_forecast,
                'Solde': [e - d for e, d in zip(enc_forecast, dec_forecast)],
                'Type': ['Pr√©vision'] * len(future_dates)
            })
            
            # Cr√©er le DataFrame des donn√©es historiques
            df_historical = pd.DataFrame({
                'Date': df_enc['ds'],
                'Encaissements': df_enc['y_enc'],
                'D√©caissements': df_dec['y_dec'],
                'Solde': df_enc['y_enc'] - df_dec['y_dec'],
                'Type': ['Historique'] * len(df_enc)
            })
            
            # Combiner les donn√©es
            df_combined = pd.concat([df_historical, df_forecast], ignore_index=True)
            
            # Trier par date
            df_combined = df_combined.sort_values('Date')
            
            output = BytesIO()
            df_combined.to_csv(output, index=False, encoding='utf-8-sig')
            output.seek(0)
            return output, 'text/csv', 'previsions_tresorerie.csv'
            
    except Exception as e:
        st.error(f"Erreur lors de l'export : {str(e)}")
        return None, None, None

if __name__ == "__main__":
    main()
